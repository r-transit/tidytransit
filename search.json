[{"path":"https://r-transit.github.io/tidytransit/articles/frequency.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Transit (GTFS) Service & Headway Mapping with R","text":"focus vignette use R make graphics often transit services operate based schedule data published General Transit Feed Specification. ’ll focus New York City Metropolitan Transit Agency’s Subway schedule vignette, can easily apply thousands GTFS data sources. See tidytransit introductory vignette instructions finding data cities operators.","code":""},{"path":"https://r-transit.github.io/tidytransit/articles/frequency.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Transit (GTFS) Service & Headway Mapping with R","text":"’ll need tidytransit installed. Please see install instructions details.","code":""},{"path":"https://r-transit.github.io/tidytransit/articles/frequency.html","id":"outline","dir":"Articles","previous_headings":"","what":"Outline","title":"Transit (GTFS) Service & Headway Mapping with R","text":", review, ’re going : Import Transit Data (GTFS) Identify Weekday Schedules Service Calculate Headways Map Headways Route Map Departures Stop Route","code":""},{"path":"https://r-transit.github.io/tidytransit/articles/frequency.html","id":"import-transit-data-gtfs","dir":"Articles","previous_headings":"Outline","what":"1) Import Transit Data (GTFS)","title":"Transit (GTFS) Service & Headway Mapping with R","text":"’ll start importing snapshot NYC MTA’s subway schedule, included package installed. note can also just uncomment line import data NYC MTA’s URL directly. Note routes services removed exmaple feed reduce package size.","code":"local_gtfs_path <- system.file(\"extdata\", \"nyc_subway.zip\", package = \"tidytransit\") gtfs <- read_gtfs(local_gtfs_path) # gtfs <- read_gtfs(\"http://web.mta.info/developers/data/nyct/subway/google_transit.zip\")"},{"path":"https://r-transit.github.io/tidytransit/articles/frequency.html","id":"identify-weekday-schedules-of-service","dir":"Articles","previous_headings":"Outline","what":"2) Identify Weekday Schedules of Service","title":"Transit (GTFS) Service & Headway Mapping with R","text":"GTFS feeds typically contain schedule schedules service given system. Selecting schedule service NYC allows us focus , example, non-holiday weekday service, Fall 2018. feeds, service selection can less complicated NYC. case, ’ll want read service patterns vignette included package order see can select right service needs. use one functions described vignette create table gtfs feed lets us filter weekday/weekend service. setting service patterns, can summarise service number trips stops. ’ll also summarise total distance covered trips service, check total distance covered average route. First, need calculate distance part route shapes. (creating maps later ) convert stops shapes simple features gtfs_as_sf. Now ’re ready roll statistics services. can also add number days service operation. ’ll print summary. seems want summarise common patterns service NYC Metro system, use s_e25d6ca service pattern, days service, trips, stops, routes. ’ll use pattern pull service_ids need use identify trips GTFS feed want summarise service. , service_id codes? put together varies operator operator. important thing service_ids also field trips table, describes trips taken system. Lets see many trips fall service_ids trips table, relate routes. Given one--one relationship service_ids routes, might conclude NYC Subway GTFS creates service_ids route trip runs . GTFS feeds simpler: single service_id might relate ‘vehicle trips running every weekdays’. Service patterns get us around complications like describing service terms exhaustive calendar dates, regardless whether operator may break route different service.","code":"gtfs <- set_servicepattern(gtfs) gtfs <- gtfs_as_sf(gtfs) gtfs$shapes$length <- st_length(gtfs$shapes)  shape_lengths <- gtfs$shapes %>%    as.data.frame() %>%    select(shape_id, length, -geometry) service_pattern_summary <- gtfs$trips %>%   left_join(gtfs$.$servicepatterns, by=\"service_id\") %>%    left_join(shape_lengths, by=\"shape_id\") %>%   left_join(gtfs$stop_times, by=\"trip_id\") %>%    group_by(servicepattern_id) %>%    summarise(     trips = n(),      routes = n_distinct(route_id),     total_distance_per_day_km = sum(as.numeric(length), na.rm=TRUE)/1e3,     route_avg_distance_km = (sum(as.numeric(length), na.rm=TRUE)/1e3)/(trips*routes),     stops=(n_distinct(stop_id)/2)) service_pattern_summary <- gtfs$.$dates_servicepatterns %>%    group_by(servicepattern_id) %>%    summarise(days_in_service = n()) %>%    left_join(service_pattern_summary, by=\"servicepattern_id\") knitr::kable(service_pattern_summary) service_ids <- gtfs$.$servicepatterns %>%    filter(servicepattern_id == \"s_e25d6ca\") %>%    pull(service_id)  head(service_ids) %>%    knitr::kable() gtfs$trips %>%   filter(service_id %in% service_ids) %>%   group_by(service_id, route_id) %>%   summarise(count = n()) %>%    head() %>%   knitr::kable()"},{"path":"https://r-transit.github.io/tidytransit/articles/frequency.html","id":"calculate-headways","dir":"Articles","previous_headings":"Outline","what":"3) Calculate Headways","title":"Transit (GTFS) Service & Headway Mapping with R","text":", now ’ve used service patterns identify set service_ids refer weekday trips, can summarize service 6 10 NYC Subway system weekdays. table includes columns id given stop, route_id, selected service_ids, number departures average headway given direction 6 10 weekdays. get_stop_frequency function simply counts number departures within time frame get departures per stop. , get headways, divides number seconds (start_time end_time) number departures, rounds nearest integer. Lets look headways 1 train, runs Bronx Bottom Manhattan. First, filter am_stop_freq data frame just stops going one direction 1 train, join original stops table, includes descriptive stop_name. can see, stops seem higher headways others, even train running direction. may counterintuitive, might expect train run every stop amount times given direction. Lets inspect stops headways higher. headways lower: can see 242-Van Cortland Stop, last stop North, Bronx, noticeably higher headways (8 mins) time day South Ferry Stop, south end Manhattan. Lets also plot headways stops map see distributed across city. First, join stops sf object 1 line’s calculated stop headways. use ggplot’s geom_sf plot headways.  map , can see variation stop headways. certain times day, 1 train skips stops north certain stop manhattan, presumably order turn around provide shorter headways stops south stop. Finally, can easily summarise headways like along entire route now, using R’s default summary function vector headways. method tidytransit uses summarise headways along routes system use get_route_frequency function, ’ll try next.","code":"am_stop_freq <- get_stop_frequency(gtfs, start_time = 6*3600, end_time = 10*3600,                                     service_ids = service_ids, by_route = TRUE) knitr::kable(head(am_stop_freq)) one_line_stops <- am_stop_freq %>%      filter(route_id == \"1\" & direction_id == 0) %>%     left_join(gtfs$stops, by =\"stop_id\") %>%      mutate(mean_headway_minutes = mean_headway/60) one_line_stops %>%    arrange(desc(mean_headway)) %>%    select(stop_name, n_departures, mean_headway) %>%    head() %>%   knitr::kable() one_line_stops %>%    arrange(desc(mean_headway)) %>%    select(stop_name, n_departures, mean_headway) %>%    tail() %>%   knitr::kable() one_line_stops_sf <- gtfs$stops %>%   right_join(one_line_stops, by=\"stop_id\") one_line_stops_sf %>%    ggplot() +    geom_sf(aes(color = mean_headway_minutes)) +   theme_bw() summary(one_line_stops$mean_headway) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>   300.0   313.0   327.0   353.8   400.0   480.0"},{"path":"https://r-transit.github.io/tidytransit/articles/frequency.html","id":"map-headways-by-route","dir":"Articles","previous_headings":"Outline","what":"4) Map Headways By Route","title":"Transit (GTFS) Service & Headway Mapping with R","text":"Now ’ll use get_route_frequency function summarise transit service route, time period. Since, hood, table summary stop frequencies along route, includes variables summary headways stop along route, well sum departures. , important note summary based trips happened within time frame specify. stops, can easily join table simple features plot map. Note pass select service_ids , route run vehicle also depends selected service. join geometries calculated frequencies: finally, lets plot routes median headways less 10 minutes morning.  clear number route lines overlap.","code":"am_route_freq <- get_route_frequency(gtfs, service_ids = service_ids,                                       start_time = 6*3600, end_time = 10*3600)  head(am_route_freq) %>%   knitr::kable() # get_route_geometry needs a gtfs object that includes shapes as simple feature data frames routes_sf <- get_route_geometry(gtfs, service_ids = service_ids) routes_sf <- routes_sf %>%    inner_join(am_route_freq, by = \"route_id\") # convert to an appropriate coordinate reference system routes_sf_crs <- sf::st_transform(routes_sf, 26919)  routes_sf_crs %>%    filter(median_headways < 10*60) %>%   ggplot() +    geom_sf(aes(colour=as.factor(median_headways))) +    labs(color = \"Headways\") +   geom_sf_text(aes(label=route_id)) +   theme_bw()"},{"path":"https://r-transit.github.io/tidytransit/articles/frequency.html","id":"map-departures-by-stop-and-route","dir":"Articles","previous_headings":"Outline","what":"5) Map Departures by Stop and Route","title":"Transit (GTFS) Service & Headway Mapping with R","text":"Still, ’d like represent frequently subway runs NYC morning. can given , graphically, route lines overlap? One method might change units representing graphically. Thus far, used stops routes units. GTFS data also come shapes table, , theory, allow us say frequency vehicles passing given shape , using similar methods. kind method beyond scope vignette. Alternatively, regular ggplot users might expect ggplot dodge function allow us move around lines , design, possible geom_sf. One can see : unlike bar chart, representations route lines geographic space map specific meaning. ’ll use cartographic trick, scaling line according total departures close number around .001 decimal degrees length street, fit map well. One might call cartogram. Next, render map, ’ll make sure make borders around route transparent, set opacity fill polygons high .  Now rough representation question set answer: frequently transit service run NYC Subway. Note graphic, intensity red tells many overlapping trains run line thickness lines represents many run along line. can combine stops get sense central stops relate routes. First, ’ll leverage common stop_name variable group count departures, directions, stops, filtering number smaller stops graphical clarity. Finally, can plot route line counts stop departure counts one map:","code":"routes_sf_buffer <- st_buffer(routes_sf,                               dist = routes_sf$total_departures/1e6) routes_sf_buffer %>%    ggplot() +    geom_sf(colour = alpha(\"white\", 0), fill = alpha(\"red\",0.2)) +   theme_bw() gtfs$stops %>%    inner_join(am_stop_freq, by = \"stop_id\") %>%    filter(n_departures > 50) %>%    select(stop_id, stop_name, n_departures, mean_headway) %>%    arrange(n_departures) %>%    head() %>%    knitr::kable() am_stop_name_departures <- left_join(gtfs$stops, am_stop_freq, by=\"stop_id\")  am_stop_name_departures <- am_stop_name_departures %>%     group_by(stop_name) %>%   transmute(total_departures = sum(n_departures, na.rm=TRUE))  am_stop_name_departures <- am_stop_name_departures %>%   filter(total_departures > 100) ggplot() +    geom_sf(data = routes_sf_buffer,            colour = alpha(\"white\",0), fill = alpha(\"red\",0.3)) +   geom_sf(data = am_stop_name_departures,            aes(size = total_departures), shape=1) +    labs(size = \"Departures (Hundreds)\") +   theme_bw() +   theme(legend.position=\"none\") +   ggtitle(\"NYC MTA - Relative Departures by Route and Stop (AM)\")"},{"path":"https://r-transit.github.io/tidytransit/articles/introduction.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Introduction to tidytransit","text":"Use tidytransit : Read GTFS Feed R Data Types Validate transit feeds Convert stops routes ‘simple features’ plot Calculate travel times transit stops Analyse route frequency headways Analyse calendar data Create time tables stops","code":""},{"path":"https://r-transit.github.io/tidytransit/articles/introduction.html","id":"installation-dependencies","dir":"Articles","previous_headings":"","what":"Installation & Dependencies","title":"Introduction to tidytransit","text":"package requires working installation sf.","code":"# Once sf is installed, you can install from CRAN with:  install.packages(\"tidytransit\")  # For the development version from Github: # install.packages(\"devtools\") devtools::install_github(\"r-transit/tidytransit\")"},{"path":"https://r-transit.github.io/tidytransit/articles/introduction.html","id":"the-general-transit-feed-specification","dir":"Articles","previous_headings":"","what":"The General Transit Feed Specification","title":"Introduction to tidytransit","text":"summary page GTFS standard good resource information standard. GTFS feeds contain many linked tables published transit schedules, service schedules, trips, stops, routes. diagram relationships tables: Source: Wikimedia, user -stk.","code":""},{"path":"https://r-transit.github.io/tidytransit/articles/introduction.html","id":"read-a-gtfs-feed","dir":"Articles","previous_headings":"","what":"Read a GTFS Feed","title":"Introduction to tidytransit","text":"GTFS data come packaged zip file comma separated tables text form. first thing tidytransit consolidate reading tables single R object, contains list tables feed. use tidytransit read_gtfs function order read feed NYC MTA R. use example feed included package example . note can read directly New York City Metropolitan Transit Authority, shown commented code . can also read URL. useful many sources GTFS data, often best source transit service providers . See next section “Finding GTFS Feeds” sources feeds. can use summary get overview feed. source tables GTFS feed now available nyc gtfs object. example, stops: tables available feed may vary. can simply print names tables read feed. table.","code":"# nyc <- read_gtfs(\"http://web.mta.info/developers/data/nyct/subway/google_transit.zip\")  local_gtfs_path <- system.file(\"extdata\",                                 \"nyc_subway.zip\",                                 package = \"tidytransit\") nyc <- read_gtfs(local_gtfs_path) summary(nyc) ## tidygtfs object ## files        agency, routes, stop_times, trips, shapes, transfers, calendar, calendar_dates, stops ## agency       MTA New York City Transit ## service      from 2018-06-24 to 2018-11-03 ## uses         stop_times (no frequencies) ## # routes        22 ## # trips      15911 ## # stop_ids    1223 ## # stop_names   306 ## # shapes       215 head(nyc$stops) ## # A tibble: 6 × 6 ##   stop_id stop_name               stop_lat stop_lon location_type parent_station ##   <chr>   <chr>                      <dbl>    <dbl>         <int> <chr>          ## 1 101     Van Cortlandt Park - 2…     40.9    -73.9             1 \"\"             ## 2 101N    Van Cortlandt Park - 2…     40.9    -73.9             0 \"101\"          ## 3 101S    Van Cortlandt Park - 2…     40.9    -73.9             0 \"101\"          ## 4 103     238 St                      40.9    -73.9             1 \"\"             ## 5 103N    238 St                      40.9    -73.9             0 \"103\"          ## 6 103S    238 St                      40.9    -73.9             0 \"103\" names(nyc) ##  [1] \"trips\"          \"stop_times\"     \"agency\"         \"calendar\"       ##  [5] \"calendar_dates\" \"stops\"          \"routes\"         \"shapes\"         ##  [9] \"transfers\"      \".\""},{"path":"https://r-transit.github.io/tidytransit/articles/introduction.html","id":"feed-validation-results","dir":"Articles","previous_headings":"Read a GTFS Feed","what":"Feed Validation Results","title":"Introduction to tidytransit","text":"reading feed, checked GTFS specification, attribute added resultant object called validation_result, tibble files fields GTFS feed compare specification. can get tibble metadata feed.","code":"validation_result <- attr(nyc, \"validation_result\") head(validation_result) ## # A tibble: 6 × 8 ##   file   file_spec file_provided_status field   field_spec field_provided_status ##   <chr>  <chr>     <lgl>                <chr>   <chr>      <lgl>                 ## 1 agency Required  TRUE                 agency… Condition… TRUE                  ## 2 agency Required  TRUE                 agency… Required   TRUE                  ## 3 agency Required  TRUE                 agency… Required   TRUE                  ## 4 agency Required  TRUE                 agency… Required   TRUE                  ## 5 agency Required  TRUE                 agency… Optional   TRUE                  ## 6 agency Required  TRUE                 agency… Optional   TRUE                  ## # ℹ 2 more variables: validation_status <chr>, validation_details <chr>"},{"path":[]},{"path":"https://r-transit.github.io/tidytransit/articles/introduction.html","id":"feed-registries","dir":"Articles","previous_headings":"Read a GTFS Feed > Finding More GTFS Feeds","what":"Feed registries","title":"Introduction to tidytransit","text":"can find feeds following sites https://database.mobilitydata.org/ https://www.transit.land/ might feed registries available, depending area interest. Transit agencies might also provide feeds website.","code":""},{"path":"https://r-transit.github.io/tidytransit/articles/introduction.html","id":"using-mobilitydata","dir":"Articles","previous_headings":"Read a GTFS Feed > Finding More GTFS Feeds","what":"Using MobilityData","title":"Introduction to tidytransit","text":"MobilityData.org provide csv file feed sources GitHub page. can load R browse data frame. Tidytransit handle GTFS realtime data, can remove entries. URL (column urls.direct_download) feed, can used read feed given area directly R. example: MobilityData feedlist contains bounding box coordinates feed can used give basic impression location feeds. Note bounding boxes might wrong. First, let’s create bounding box polygons. boxes now shown interactive map.","code":"mbd_url = \"https://storage.googleapis.com/storage/v1/b/mdb-csv/o/sources.csv?alt=media\" MobilityData.csv = read.csv(mbd_url) MobilityData_feedlist = MobilityData.csv %>%    as_tibble() %>%    filter(data_type == \"gtfs\")  str(MobilityData_feedlist) ## tibble [2,108 × 27] (S3: tbl_df/tbl/data.frame) ##  $ mdb_source_id                          : int [1:2108] 1 2 3 4 5 6 7 8 9 10 ... ##  $ data_type                              : chr [1:2108] \"gtfs\" \"gtfs\" \"gtfs\" \"gtfs\" ... ##  $ entity_type                            : chr [1:2108] \"\" \"\" \"\" \"\" ... ##  $ location.country_code                  : chr [1:2108] \"US\" \"CA\" \"CA\" \"US\" ... ##  $ location.subdivision_name              : chr [1:2108] \"Maine\" \"Ontario\" \"Ontario\" \"Ohio\" ... ##  $ location.municipality                  : chr [1:2108] \"Casco Bay\" \"London\" \"Barrie\" \"Athens\" ... ##  $ provider                               : chr [1:2108] \"Casco Bay Lines\" \"London Transit Commission\" \"Barrie Transit\" \"Athens Public Transit\" ... ##  $ is_official                            : chr [1:2108] \"\" \"\" \"True\" \"\" ... ##  $ name                                   : chr [1:2108] \"\" \"\" \"\" \"\" ... ##  $ note                                   : chr [1:2108] \"\" \"\" \"\" \"\" ... ##  $ feed_contact_email                     : chr [1:2108] \"\" \"croy@londontransit.ca\" \"\" \"\" ... ##  $ static_reference                       : chr [1:2108] \"\" \"\" \"\" \"\" ... ##  $ urls.direct_download                   : chr [1:2108] \"http://smttracker.com/downloads/gtfs/cascobaylines-portland-me-usa.zip\" \"http://www.londontransit.ca/gtfsfeed/google_transit.zip\" \"http://www.myridebarrie.ca/gtfs/Google_transit.zip\" \"https://transitfeeds.com/p/athens-public-transit/298/latest/download\" ... ##  $ urls.authentication_type               : int [1:2108] NA 0 NA NA NA NA NA NA 0 0 ... ##  $ urls.authentication_info               : chr [1:2108] \"\" \"\" \"\" \"\" ... ##  $ urls.api_key_parameter_name            : chr [1:2108] \"\" \"\" \"\" \"\" ... ##  $ urls.latest                            : chr [1:2108] \"https://storage.googleapis.com/storage/v1/b/mdb-latest/o/us-maine-casco-bay-lines-gtfs-1.zip?alt=media\" \"https://storage.googleapis.com/storage/v1/b/mdb-latest/o/ca-ontario-london-transit-commission-gtfs-2.zip?alt=media\" \"https://storage.googleapis.com/storage/v1/b/mdb-latest/o/ca-ontario-barrie-transit-gtfs-3.zip?alt=media\" \"https://storage.googleapis.com/storage/v1/b/mdb-latest/o/us-ohio-athens-public-transit-gtfs-4.zip?alt=media\" ... ##  $ urls.license                           : chr [1:2108] \"\" \"https://www.londontransit.ca/open-data/ltcs-open-data-terms-of-use/\" \"https://www.barrie.ca/services-payments/transportation-parking/barrie-transit/barrie-gtfs\" \"\" ... ##  $ location.bounding_box.minimum_latitude : num [1:2108] 43.7 42.9 44.3 39.3 44.1 ... ##  $ location.bounding_box.maximum_latitude : num [1:2108] 43.7 43.1 44.4 39.4 45 ... ##  $ location.bounding_box.minimum_longitude: num [1:2108] -70.2 -81.4 -79.7 -82.1 -75.8 ... ##  $ location.bounding_box.maximum_longitude: num [1:2108] -70.1 -81.1 -79.6 -82 -74.6 ... ##  $ location.bounding_box.extracted_on     : chr [1:2108] \"2022-02-22T19:51:22+00:00\" \"2022-02-22T19:51:34+00:00\" \"2022-03-01T22:43:25+00:00\" \"2022-03-23T14:43:11+00:00\" ... ##  $ status                                 : chr [1:2108] \"inactive\" \"\" \"\" \"deprecated\" ... ##  $ features                               : chr [1:2108] \"\" \"\" \"\" \"\" ... ##  $ redirect.id                            : chr [1:2108] \"\" \"\" \"\" \"1973\" ... ##  $ redirect.comment                       : chr [1:2108] \"\" \"\" \"\" \"\" ... gtfs_path_goldengate <- MobilityData_feedlist %>%    filter(provider == \"Golden Gate Transit\") %>%   pull(urls.direct_download)  gtfs_goldengate = read_gtfs(gtfs_path_goldengate) # create a bounding box polygon from min/max corner coordinates suppressPackageStartupMessages(library(sf)) bbox_polygon = function(lon_min, lon_max, lat_min, lat_max) {   corner_coords = matrix(     c(lon_min, lat_min,       lon_min, lat_max,       lon_max, lat_max,       lon_max, lat_min,       lon_min, lat_min),     ncol = 2, byrow = TRUE   )   polyg = st_polygon(list(corner_coords))   return(st_sfc(polyg, crs = 4326)) }  # create bounding box polygon (only for reasonable values) MobilityData_sf = MobilityData_feedlist %>%    filter(!is.na(location.bounding_box.minimum_longitude)) %>%    filter(location.bounding_box.minimum_latitude > -89) %>%    group_by(mdb_source_id) %>%    mutate(geometry = bbox_polygon(location.bounding_box.minimum_longitude,                                  location.bounding_box.maximum_longitude,                                  location.bounding_box.minimum_latitude,                                  location.bounding_box.maximum_latitude)) %>%    ungroup() %>%    st_as_sf() library(leaflet) leaflet() %>%    addProviderTiles(provider = providers$CartoDB.Positron) %>%    addPolygons(data = MobilityData_sf, weight = 2,                fillOpacity = 0.1, label = substr(MobilityData_sf$provider, 0, 60))"},{"path":"https://r-transit.github.io/tidytransit/articles/servicepatterns.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Service Patterns and Calendar Schedules","text":"trip GTFS feed referenced service_id (trips.txt). GTFS reference specifies “service_id contains ID uniquely identifies set dates service available one routes”. service run every weekday Saturdays example. possible services run holidays year, independent weekdays. However, feeds required indicate anything service_ids feeds even use unique service_id trip day. vignette, ’ll look general way gather information trips run using “service patterns”. Service patterns can used find typical day analysis like routing trip frequencies different days.","code":""},{"path":"https://r-transit.github.io/tidytransit/articles/servicepatterns.html","id":"prepare-data","dir":"Articles","previous_headings":"","what":"Prepare data","title":"Service Patterns and Calendar Schedules","text":"use feed New York Metropolitan Transportation Authority. provided sample feed tidytransit can read directly MTA’s website. Note routes services removed feed reduce package size. Tidytransit provides dates_services (stored list .) indicates service_id runs date. later useful linking dates trips via service_id. understand service patterns better need information weekdays holidays. calendar table know weekday possible holidays date. ’ll use minimal example two holidays. analyse dates trips run group similar services use service patterns. pattern simply lists dates trip runs . example, trip pattern like 2019-03-07, 2019-03-14, 2019-03-21, 2019-03-28 runs every Thursday March 2019. handle patterns, create servicepattern_id using hash function. Ideally number servicepattern_ids service_ids. However, real life feeds rarely case. addition, usability service patterns depends largely feed complexity. gtfs feed now contains data frame servicepatterns links servicepattern_id existing service_id (extension trip_id). addition, gtfs$.$dates_servicepatterns created connects dates service patterns (like dates_services). can compare number service patterns number services. example feed uses 52 service_ids actually 3 different date patterns. feeds might low numbers, example Swiss GTFS feed uses around 15’600 service_ids identify unique date patterns.","code":"local_gtfs_path <- system.file(\"extdata\", \"nyc_subway.zip\", package = \"tidytransit\") gtfs <- read_gtfs(local_gtfs_path) # gtfs <- read_gtfs(\"http://web.mta.info/developers/data/nyct/subway/google_transit.zip\") head(gtfs$.$dates_services) ## # A tibble: 6 × 2 ##   date       service_id              ##   <date>     <chr>                   ## 1 2018-06-24 ASP18GEN-1037-Sunday-00 ## 2 2018-06-24 ASP18GEN-2048-Sunday-00 ## 3 2018-06-24 ASP18GEN-3041-Sunday-00 ## 4 2018-06-24 ASP18GEN-4049-Sunday-00 ## 5 2018-06-24 ASP18GEN-5048-Sunday-00 ## 6 2018-06-24 ASP18GEN-6030-Sunday-00 holidays = tribble(~date, ~holiday,   ymd(\"2018-07-04\"), \"Independence Day\",   ymd(\"2018-09-03\"), \"Labor Day\")  calendar = tibble(date = unique(gtfs$.$dates_services$date)) %>%    mutate(     weekday = (function(date) {       c(\"Sunday\", \"Monday\", \"Tuesday\",          \"Wednesday\", \"Thursday\", \"Friday\",          \"Saturday\")[as.POSIXlt(date)$wday + 1]     })(date)   )  calendar <- calendar %>% left_join(holidays, by = \"date\") head(calendar) ## # A tibble: 6 × 3 ##   date       weekday   holiday ##   <date>     <chr>     <chr>   ## 1 2018-06-24 Sunday    NA      ## 2 2018-06-25 Monday    NA      ## 3 2018-06-26 Tuesday   NA      ## 4 2018-06-27 Wednesday NA      ## 5 2018-06-28 Thursday  NA      ## 6 2018-06-29 Friday    NA gtfs <- set_servicepattern(gtfs) head(gtfs$.$servicepatterns) ## # A tibble: 6 × 2 ##   service_id                servicepattern_id ##   <chr>                     <chr>             ## 1 ASP18GEN-1037-Sunday-00   s_a4c6b26         ## 2 ASP18GEN-1038-Saturday-00 s_c578d4a         ## 3 ASP18GEN-1087-Weekday-00  s_e25d6ca         ## 4 ASP18GEN-2042-Saturday-00 s_c578d4a         ## 5 ASP18GEN-2048-Sunday-00   s_a4c6b26         ## 6 ASP18GEN-2097-Weekday-00  s_e25d6ca head(gtfs$.$dates_servicepatterns) ## # A tibble: 6 × 2 ##   date       servicepattern_id ##   <date>     <chr>             ## 1 2018-06-24 s_a4c6b26         ## 2 2018-06-25 s_e25d6ca         ## 3 2018-06-26 s_e25d6ca         ## 4 2018-06-27 s_e25d6ca         ## 5 2018-06-28 s_e25d6ca         ## 6 2018-06-29 s_e25d6ca # number of service ids used n_services <- length(unique(gtfs$trips$service_id)) # 52  # unique date patterns  n_servicepatterns <- length(unique(gtfs$.$servicepatterns$servicepattern_id)) # 3"},{"path":[]},{"path":"https://r-transit.github.io/tidytransit/articles/servicepatterns.html","id":"exploration-plot","dir":"Articles","previous_headings":"Analyse Data","what":"Exploration Plot","title":"Service Patterns and Calendar Schedules","text":"’ll now try figure usable names patterns. good way start visualising data.  plot shows pattern s_a4c6b26 runs every Sunday July October. s_c578d4a runs every Saturday one Wednesday. s_e25d6ca covers weekdays (Mondays Friday) one exception.","code":"date_servicepattern_table <- gtfs$.$dates_servicepatterns %>% left_join(calendar, by = \"date\")  ggplot(date_servicepattern_table) + theme_bw() +    geom_point(aes(x = date, y = servicepattern_id, color = weekday), size = 1) +    scale_x_date(breaks = scales::date_breaks(\"1 month\")) + theme(legend.position = \"bottom\")"},{"path":"https://r-transit.github.io/tidytransit/articles/servicepatterns.html","id":"names-for-service-patterns","dir":"Articles","previous_headings":"Analyse Data","what":"Names for service patterns","title":"Service Patterns and Calendar Schedules","text":"’s generally difficult automatically generate readable names service patterns. see semi automated approach heuristics. However, workflow depends largely feed structure. might also consider setting names completely manually. ’ll apply function service patterns create table ids names.","code":"suggest_servicepattern_name = function(dates, calendar) {   servicepattern_calendar = tibble(date = dates) %>% left_join(calendar, by = \"date\")      # all normal dates without holidays   calendar_normal = servicepattern_calendar %>% filter(is.na(holiday))      # create a frequency table for all calendar dates without holidays   weekday_freq = sort(table(calendar_normal$weekday), decreasing = TRUE)   n_weekdays = length(weekday_freq)      # all holidays that are not covered by normal weekdays anyways   calendar_holidays <- servicepattern_calendar %>% filter(!is.na(holiday)) %>% filter(!(weekday %in% names(weekday_freq)))    if(n_weekdays == 7) {     pattern_name = \"Every day\"   }   # Single day service   else if(n_weekdays == 1) {     wd = names(weekday_freq)[1]     # while paste0(weekday, \"s\") is easier, this solution can be used for other languages     pattern_name = c(\"Sunday\"  = \"Sundays\",          \"Monday\"    = \"Mondays\",          \"Tuesday\"   = \"Tuesdays\",          \"Wednesday\" = \"Wednesdays\",         \"Thursday\"  = \"Thursdays\",           \"Friday\"    = \"Fridays\",           \"Saturday\"  = \"Saturdays\")[wd]   }    # Weekday Service   else if(n_weekdays == 5 &&        length(intersect(names(weekday_freq),          c(\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"))) == 5) {     pattern_name = \"Weekdays\"   }   # Weekend   else if(n_weekdays == 2 &&        length(intersect(names(weekday_freq), c(\"Saturday\", \"Sunday\"))) == 2) {     pattern_name = \"Weekends\"   }   # Multiple weekdays that appear regularly   else if(n_weekdays >= 2 && (max(weekday_freq) - min(weekday_freq)) <= 1) {     wd = names(weekday_freq)     ordered_wd = wd[order(match(wd, c(\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\")))]     pattern_name = paste(ordered_wd, collapse = \", \")   }    # default   else {     pattern_name = paste(weekday_freq, names(weekday_freq), sep = \"x \", collapse = \", \")   }      # add holidays   if(nrow(calendar_holidays) > 0) {     pattern_name <- paste0(pattern_name, \" and \", paste(calendar_holidays$holiday, collapse = \", \"))   }      pattern_name <- paste0(pattern_name, \" (\", min(dates), \" - \", max(dates), \")\")     return(pattern_name) } servicepattern_names = gtfs$.$dates_servicepatterns %>%    group_by(servicepattern_id) %>%    summarise(     servicepattern_name = suggest_servicepattern_name(date, calendar)   )  print(servicepattern_names) ## # A tibble: 3 × 2 ##   servicepattern_id servicepattern_name                                      ##   <chr>             <chr>                                                    ## 1 s_a4c6b26         Sundays and Labor Day (2018-06-24 - 2018-10-28)          ## 2 s_c578d4a         Saturdays and Independence Day (2018-06-30 - 2018-11-03) ## 3 s_e25d6ca         Weekdays (2018-06-25 - 2018-11-02)"},{"path":[]},{"path":"https://r-transit.github.io/tidytransit/articles/servicepatterns.html","id":"plot-calendar-for-each-service-pattern","dir":"Articles","previous_headings":"Visualise services","what":"Plot calendar for each service pattern","title":"Service Patterns and Calendar Schedules","text":"can plot service pattern like calendar visualise different patterns. original services can plotted similarly (given ’s many) using dates_services service_id.","code":"dates = gtfs$.$dates_servicepatterns dates$wday <- lubridate::wday(dates$date, label = TRUE, abbr = TRUE, week_start = 7) dates$week_nr <- lubridate::week(dates$date)  dates <- dates %>% group_by(week_nr) %>%    summarise(week_first_date = min(date)) %>%    right_join(dates, by = \"week_nr\")  week_labels = dates %>% select(week_nr, week_first_date) %>% unique()  ggplot(dates) + theme_bw() +   geom_tile(aes(x = wday, y = week_nr), color = \"#747474\") +   scale_x_discrete(drop = F) +   scale_y_continuous(trans = \"reverse\", labels = week_labels$week_first_date, breaks = week_labels$week_nr) +   theme(legend.position = \"bottom\", axis.text.x = element_text(angle = 90, hjust = 1)) +   labs(x = NULL, y = \"Date of Sundays\") +   facet_wrap(~servicepattern_id, nrow = 1)"},{"path":"https://r-transit.github.io/tidytransit/articles/servicepatterns.html","id":"plot-number-of-trips-per-day-as-calendar","dir":"Articles","previous_headings":"Visualise services","what":"Plot number of trips per day as calendar","title":"Service Patterns and Calendar Schedules","text":"can plot number trips day calendar heat map.","code":"trips_servicepattern = left_join(select(gtfs$trips, trip_id, service_id), gtfs$.$servicepatterns, by = \"service_id\") trip_dates = left_join(gtfs$.$dates_servicepatterns, trips_servicepattern, by = \"servicepattern_id\", relationship = \"many-to-many\")  trip_dates_count = trip_dates %>%    group_by(date) %>%    summarise(count = dplyr::n())   trip_dates_count <- trip_dates_count %>%    mutate(weekday = lubridate::wday(date, label = TRUE, abbr = TRUE, week_start = 7),          day_of_month = lubridate::day(date),          first_day_of_month = lubridate::wday(date - day_of_month, week_start = 7),          week_of_month = ceiling((day_of_month - as.numeric(weekday) - first_day_of_month) / 7),          month = lubridate::month(date, label = TRUE, abbr = FALSE))  ggplot(trip_dates_count, aes(x = weekday, y = -week_of_month)) +    theme_bw() +   facet_wrap(~month, ncol = 3) +   geom_tile(aes(fill = count, colour = \"grey50\")) +   geom_text(aes(label = day_of_month), size = 3, colour = \"grey20\") +   scale_fill_gradient(low = \"cornsilk1\", high = \"DarkOrange\", na.value=\"white\") +   scale_color_manual(guide = \"none\", values = \"grey50\") +   theme(axis.text.y = element_blank(), axis.ticks.y = element_blank()) +   theme(panel.grid = element_blank()) +   labs(x = NULL, y = NULL, fill = \"# trips\") +   coord_fixed()"},{"path":"https://r-transit.github.io/tidytransit/articles/timetable.html","id":"read-gtfs-data","dir":"Articles","previous_headings":"","what":"Read GTFS data","title":"Generate a Departure Timetable","text":"use feed New York Metropolitan Transportation Authority. provided sample feed tidytransit can read directly MTA’s website.","code":"local_gtfs_path <- system.file(\"extdata\", \"nyc_subway.zip\", package = \"tidytransit\") gtfs <- read_gtfs(local_gtfs_path) # gtfs <- read_gtfs(\"http://web.mta.info/developers/data/nyct/subway/google_transit.zip\")"},{"path":"https://r-transit.github.io/tidytransit/articles/timetable.html","id":"trip_origin-and-trip_headsign","dir":"Articles","previous_headings":"","what":"trip_origin and trip_headsign","title":"Generate a Departure Timetable","text":"display bus (public transit vehicle) headed timetable need column trip_headsign gtfs$trips. optional field example feed provides information. display vehicle comes timetable need create new column gtfs$trips ’ll call trip_origin. case trip_headsign exist feed can generated similarly trip_origin:","code":"# get the id of the first stop in the trip's stop sequence first_stop_id <- gtfs$stop_times %>%    group_by(trip_id) %>%    summarise(stop_id = stop_id[which.min(stop_sequence)])  # join with the stops table to get the stop_name first_stop_names <- left_join(first_stop_id, gtfs$stops, by=\"stop_id\")  # rename the first stop_name as trip_origin trip_origins <- first_stop_names %>% select(trip_id, trip_origin = stop_name)  # join the trip origins back onto the trips gtfs$trips <- left_join(gtfs$trips, trip_origins, by = \"trip_id\") gtfs$trips %>%   select(route_id, trip_origin) %>%   head() ## # A tibble: 6 × 2 ##   route_id trip_origin                 ##   <chr>    <chr>                       ## 1 1        Van Cortlandt Park - 242 St ## 2 1        Van Cortlandt Park - 242 St ## 3 1        Van Cortlandt Park - 242 St ## 4 1        Van Cortlandt Park - 242 St ## 5 1        South Ferry                 ## 6 1        Van Cortlandt Park - 242 St if(!exists(\"trip_headsign\", where = gtfs$trips)) {   # get the last id of the trip's stop sequence   trip_headsigns <- gtfs$stop_times %>%      group_by(trip_id) %>%      summarise(stop_id = stop_id[which.max(stop_sequence)]) %>%      left_join(gtfs$stops, by=\"stop_id\") %>%     select(trip_id, trip_headsign.computed = stop_name)    # assign the headsign to the gtfs object    gtfs$trips <- left_join(gtfs$trips, trip_headsigns, by = \"trip_id\") }"},{"path":"https://r-transit.github.io/tidytransit/articles/timetable.html","id":"create-a-departure-time-table","dir":"Articles","previous_headings":"","what":"Create A Departure Time Table","title":"Generate a Departure Timetable","text":"create departure timetable, first need find ids stops stops table name, stop_name might cover different platforms thus multiple stop_ids stops table. Note multiple unrelated stops can stop_name, see cluster_stops() examples find cases.","code":"stop_ids <- gtfs$stops %>%    filter(stop_name == \"Times Sq - 42 St\") %>%    select(stop_id)"},{"path":"https://r-transit.github.io/tidytransit/articles/timetable.html","id":"trips-departing-from-stop","dir":"Articles","previous_headings":"","what":"Trips departing from stop","title":"Generate a Departure Timetable","text":"selected stop_ids Time Square, can join trip columns: route_id, service_id, trip_headsign, trip_origin. stop_ids trips linked via stop_times data frame, joining stop_ids ’ve selected stop_times data frame trips data frame.","code":"departures <- stop_ids %>%    inner_join(gtfs$stop_times %>%                 select(trip_id, arrival_time,                        departure_time, stop_id),               by = \"stop_id\")  departures <- departures %>%    left_join(gtfs$trips %>%                select(trip_id, route_id,                       service_id, trip_headsign,                       trip_origin),              by = \"trip_id\")"},{"path":"https://r-transit.github.io/tidytransit/articles/timetable.html","id":"add-route-info-route_short_name","dir":"Articles","previous_headings":"","what":"add route info (route_short_name)","title":"Generate a Departure Timetable","text":"trip belongs route, route short name can added departures joining trips data frame gtfs$routes. Now data frame tells us origin, destination, time train departs Times Square every possible schedule service. However, don’t know days trips run. Using service_id column calculated departures tidytransit’s calculated dates_services data frame, can filter trips given date interest. Please see servicepatterns vignette examples use table.","code":"departures <- departures %>%    left_join(gtfs$routes %>%                select(route_id,                       route_short_name),              by = \"route_id\") departures %>%    select(arrival_time,          departure_time,          trip_headsign,trip_origin,          route_id) %>%   head() %>%   knitr::kable() head(gtfs$.$dates_services) ## # A tibble: 6 × 2 ##   date       service_id              ##   <date>     <chr>                   ## 1 2018-06-24 ASP18GEN-1037-Sunday-00 ## 2 2018-06-24 ASP18GEN-2048-Sunday-00 ## 3 2018-06-24 ASP18GEN-3041-Sunday-00 ## 4 2018-06-24 ASP18GEN-4049-Sunday-00 ## 5 2018-06-24 ASP18GEN-5048-Sunday-00 ## 6 2018-06-24 ASP18GEN-6030-Sunday-00"},{"path":"https://r-transit.github.io/tidytransit/articles/timetable.html","id":"extract-a-single-day","dir":"Articles","previous_headings":"","what":"Extract a single day","title":"Generate a Departure Timetable","text":"Now ready extract service table given day year. example, August 23rd 2018, typical weekday, can filter follows: services trips set depends largely feed. idea handle dates questions schedules look servicepatterns vignette.","code":"services_on_180823 <- gtfs$.$dates_services %>%    filter(date == \"2018-08-23\") %>%    select(service_id)  departures_180823 <- departures %>%    inner_join(services_on_180823, by = \"service_id\") departures_180823 %>%   arrange(departure_time, stop_id, route_short_name) %>%    select(departure_time, stop_id, route_short_name, trip_headsign) %>%    filter(departure_time >= hms::hms(hours = 7)) %>%    filter(departure_time < hms::hms(hours = 7, minutes = 10)) %>%    knitr::kable()"},{"path":"https://r-transit.github.io/tidytransit/articles/timetable.html","id":"simple-plot","dir":"Articles","previous_headings":"","what":"Simple plot","title":"Generate a Departure Timetable","text":"’ll now plot departures Times Square depending trip_headsign route. can use route colors provided feed.  Now plot departures stop_ids name, can separate different stop_ids. following plot shows departures stop_ids 127N 127S 7 8 .  course plot idea can expanded . also differentiate route direction (using direction_id, headsign, origin next/previous stops). Another approach calculate frequencies show different levels service day, depending goal analysis.","code":"route_colors <- gtfs$routes %>% select(route_id, route_short_name, route_color) route_colors$route_color[which(route_colors$route_color == \"\")] <- \"454545\" route_colors <- setNames(paste0(\"#\", route_colors$route_color), route_colors$route_short_name)  ggplot(departures_180823) + theme_bw() +   geom_point(aes(y=trip_headsign, x=departure_time, color = route_short_name), size = 0.2) +   scale_x_time(breaks = seq(0, max(as.numeric(departures$departure_time)), 3600),                 labels = scales::time_format(\"%H:%M\")) +   theme(axis.text.x = element_text(angle = 90, hjust = 1)) +   theme(legend.position = \"bottom\") +   scale_color_manual(values = route_colors) +   labs(title = \"Departures from Times Square on 08/23/18\") departures_180823_sub_7to8 <- departures_180823 %>%    filter(stop_id %in% c(\"127N\", \"127S\")) %>%    filter(departure_time >= hms::hms(hours = 7) & departure_time <= hms::hms(hours = 8))  ggplot(departures_180823_sub_7to8) +    theme_bw() +   geom_point(aes(y=trip_headsign, x=departure_time, color = route_short_name), size = 1) +   scale_x_time(breaks = seq(7*3600, 9*3600, 300), labels = scales::time_format(\"%H:%M\")) +   scale_y_discrete(drop = FALSE) +   theme(axis.text.x = element_text(angle = 90, hjust = 1)) +   theme(legend.position = \"bottom\") +   labs(title = \"Departures from Times Square on 08/23/18\") +   facet_wrap(~stop_id, ncol = 1)"},{"path":"https://r-transit.github.io/tidytransit/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Flavio Poletti. Author, maintainer. Daniel Herszenhut. Author. Mark Padgham. Author. Tom Buckley. Author. Danton Noriega-Goodwin. Author. Angela Li. Contributor. Elaine McVey. Contributor. Charles Hans Thompson. Contributor. Michael Sumner. Contributor. Patrick Hausmann. Contributor. Bob Rudis. Contributor. James Lamb. Contributor. Alexandra Kapp. Contributor. Kearey Smith. Contributor. Dave Vautin. Contributor. Kyle Walker. Contributor. Davis Vaughan. Contributor. Ryan Rymarczyk. Contributor. Kirill Müller. Contributor.","code":""},{"path":"https://r-transit.github.io/tidytransit/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Poletti F, Herszenhut D, Padgham M, Buckley T, Noriega-Goodwin D (2025). tidytransit: Read, Validate, Analyze, Map GTFS Feeds. R package version 1.7.1, https://github.com/r-transit/tidytransit.","code":"@Manual{,   title = {tidytransit: Read, Validate, Analyze, and Map GTFS Feeds},   author = {Flavio Poletti and Daniel Herszenhut and Mark Padgham and Tom Buckley and Danton Noriega-Goodwin},   year = {2025},   note = {R package version 1.7.1},   url = {https://github.com/r-transit/tidytransit}, }"},{"path":"https://r-transit.github.io/tidytransit/conduct.html","id":null,"dir":"","previous_headings":"","what":"Contributor Code of Conduct","title":"Contributor Code of Conduct","text":"contributors project, pledge respect people contribute. also expect contributors project harass one another. Examples harrassment include, limited , use sexual language imagery, derogatory comments, racism, personal attacks, trolling, insults, harassment. Contributors responsible responding comments, commits, code, wiki edits, issues, contributions. Project contributors follow Code Conduct removed. Please report instances harrassment. can contacting one project contributors, opening issue.","code":""},{"path":"https://r-transit.github.io/tidytransit/contributing.html","id":null,"dir":"","previous_headings":"","what":"Contributing","title":"Contributing","text":"can contribute : Filing bug report feature request issue. Suggesting change via pull request.","code":""},{"path":"https://r-transit.github.io/tidytransit/contributing.html","id":"contributors","dir":"","previous_headings":"","what":"Contributors","title":"Contributing","text":"contribute, please add name DESCRIPTION file : https://github.com/r-transit/tidytransit/blob/master/DESCRIPTION#L6-L15","code":""},{"path":"https://r-transit.github.io/tidytransit/contributing.html","id":"issues","dir":"","previous_headings":"","what":"Issues","title":"Contributing","text":"filing issue, important thing include minimal reproducible example can quickly verify problem, figure fix . three things need include make example reproducible: required packages, data, code.","code":""},{"path":"https://r-transit.github.io/tidytransit/contributing.html","id":"pull-requests","dir":"","previous_headings":"","what":"Pull requests","title":"Contributing","text":"contribute change tidytransit, follow steps: Create branch git make changes. Push branch github issue pull request (PR). Discuss pull request. Iterate either accept PR decide ’s good fit.","code":""},{"path":"https://r-transit.github.io/tidytransit/index.html","id":"tidytransit","dir":"","previous_headings":"","what":"Read, Validate, Analyze, and Map GTFS Feeds","title":"Read, Validate, Analyze, and Map GTFS Feeds","text":"Use tidytransit map transit stops routes, calculate travel times transit frequencies, validate transit feeds. Tidytransit reads General Transit Feed Specification tidyverse simple features data frames. Tidytransit can used : read GTFS feeds R calculate travel times transit stops convert stops routes sf data frames validate transit feeds look following vignettes see tidytransit can used analyse feed: introduction calendar service patterns create time tables stops frequency headway calculations","code":""},{"path":"https://r-transit.github.io/tidytransit/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Read, Validate, Analyze, and Map GTFS Feeds","text":"package requires working installation sf. Install tidytransit CRAN: development version Github:","code":"install.packages('tidytransit') # install.packages(\"remotes\") remotes::install_github(\"r-transit/tidytransit\")"},{"path":"https://r-transit.github.io/tidytransit/index.html","id":"gtfs-related-packages","dir":"","previous_headings":"","what":"GTFS-related packages","title":"Read, Validate, Analyze, and Map GTFS Feeds","text":"gtfsio R package read write gtfs feeds, tidytransit uses gtfsio reading/writing feeds gtfstools Tools editing analysing transit feeds gtfsrouter Package public transport routing gtfs2gps Converting public transport data GTFS format GPS-like records GTFSwizard Set tools exploring manipulating, builds tidytransit","code":""},{"path":"https://r-transit.github.io/tidytransit/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Read, Validate, Analyze, and Map GTFS Feeds","text":"Please feel free issue pull request open issue.","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/agency_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a text listing the first max_agencies agencies of the feed — agency_info","title":"Create a text listing the first max_agencies agencies of the feed — agency_info","text":"Create text listing first max_agencies agencies feed","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/agency_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a text listing the first max_agencies agencies of the feed — agency_info","text":"","code":"agency_info(gtfs_obj, max_agencies = 3)"},{"path":"https://r-transit.github.io/tidytransit/reference/agency_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a text listing the first max_agencies agencies of the feed — agency_info","text":"gtfs_obj gtfs feed (tidygtfs object) max_agencies max number agencies list using \"...\"","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/agency_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a text listing the first max_agencies agencies of the feed — agency_info","text":"called side effects","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/as_tidygtfs.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert another gtfs like object to a tidygtfs object — as_tidygtfs","title":"Convert another gtfs like object to a tidygtfs object — as_tidygtfs","text":"Convert another gtfs like object tidygtfs object","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/as_tidygtfs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert another gtfs like object to a tidygtfs object — as_tidygtfs","text":"","code":"as_tidygtfs(x, ...)"},{"path":"https://r-transit.github.io/tidytransit/reference/as_tidygtfs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert another gtfs like object to a tidygtfs object — as_tidygtfs","text":"x gtfs object ... ignored","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/as_tidygtfs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert another gtfs like object to a tidygtfs object — as_tidygtfs","text":"tidygtfs object","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/cluster_stops.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster nearby stops within a group — cluster_stops","title":"Cluster nearby stops within a group — cluster_stops","text":"Finds clusters stops unique value group_col (e.g. stop_name). Can used find different groups stops share name located max_dist apart. gtfs_stops assigned new column (named cluster_colname) contains group_col value cluster number.","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/cluster_stops.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster nearby stops within a group — cluster_stops","text":"","code":"cluster_stops(   gtfs_stops,   max_dist = 300,   group_col = \"stop_name\",   cluster_colname = \"stop_name_cluster\" )"},{"path":"https://r-transit.github.io/tidytransit/reference/cluster_stops.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster nearby stops within a group — cluster_stops","text":"gtfs_stops Stops table gtfs object. also possible pass tidygtfs object enable piping. max_dist stop groups maximum distance among threshold (meters) clustered. group_col Clusters calculated set stops value column (default: stop_name) cluster_colname Name new column name. Can group_col overwrite.","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/cluster_stops.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster nearby stops within a group — cluster_stops","text":"Returns stops table added cluster column. gtfs_stops tidygtfs object, modified tidygtfs object return","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/cluster_stops.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cluster nearby stops within a group — cluster_stops","text":"stats::kmeans() used clustering.","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/cluster_stops.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cluster nearby stops within a group — cluster_stops","text":"","code":"# \\donttest{ library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union nyc_path <- system.file(\"extdata\", \"nyc_subway.zip\", package = \"tidytransit\") nyc <- read_gtfs(nyc_path) nyc <- cluster_stops(nyc)  # There are 6 stops with the name \"86 St\" that are far apart stops_86_St = nyc$stops %>%    filter(stop_name == \"86 St\")  table(stops_86_St$stop_name_cluster) #>  #> 86 St [1] 86 St [2] 86 St [3] 86 St [4] 86 St [5] 86 St [6]  #>         3         3         3         3         3         3   stops_86_St %>% select(stop_id, stop_name, parent_station, stop_name_cluster) %>% head() #> # A tibble: 6 × 4 #>   stop_id stop_name parent_station stop_name_cluster #>   <chr>   <chr>     <chr>          <chr>             #> 1 121     86 St     \"\"             86 St [4]         #> 2 121N    86 St     \"121\"          86 St [4]         #> 3 121S    86 St     \"121\"          86 St [4]         #> 4 626     86 St     \"\"             86 St [3]         #> 5 626N    86 St     \"626\"          86 St [3]         #> 6 626S    86 St     \"626\"          86 St [3]          library(ggplot2) ggplot(stops_86_St) +   geom_point(aes(stop_lon, stop_lat, color = stop_name_cluster))  # }"},{"path":"https://r-transit.github.io/tidytransit/reference/convert_types.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert columns between gtfsio types to tidytransit types according to GTFS reference — convert_types","title":"Convert columns between gtfsio types to tidytransit types according to GTFS reference — convert_types","text":"Convert columns gtfsio types tidytransit types according GTFS reference","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/convert_types.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert columns between gtfsio types to tidytransit types according to GTFS reference — convert_types","text":"","code":"convert_types(gtfs_list, conversion_table, conversion_function)"},{"path":"https://r-transit.github.io/tidytransit/reference/convert_types.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert columns between gtfsio types to tidytransit types according to GTFS reference — convert_types","text":"gtfs_list gtfs object conversion_table data.frame containing column file Field_Name, generally internal gtfs_reference_types dataset conversion_function function convert columns","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/convert_types.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert columns between gtfsio types to tidytransit types according to GTFS reference — convert_types","text":"gtfs_list converted (overwritten) columns tables","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/duplicated_primary_keys.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if primary keys are unique within tables — duplicated_primary_keys","title":"Check if primary keys are unique within tables — duplicated_primary_keys","text":"Check primary keys unique within tables","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/duplicated_primary_keys.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if primary keys are unique within tables — duplicated_primary_keys","text":"","code":"duplicated_primary_keys(gtfs_list)"},{"path":"https://r-transit.github.io/tidytransit/reference/duplicated_primary_keys.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if primary keys are unique within tables — duplicated_primary_keys","text":"gtfs_list list tables","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/empty_strings_to_na.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert empty strings (","title":"Convert empty strings (","text":"Convert empty strings (\"\") NA values gtfs tables","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/empty_strings_to_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert empty strings (","text":"","code":"empty_strings_to_na(gtfs_obj)"},{"path":"https://r-transit.github.io/tidytransit/reference/empty_strings_to_na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert empty strings (","text":"gtfs_obj gtfs feed (tidygtfs object)","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/empty_strings_to_na.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert empty strings (","text":"gtfs_obj empty strings tables replaced NA","code":""},{"path":[]},{"path":"https://r-transit.github.io/tidytransit/reference/feed_contains..html","id":null,"dir":"Reference","previous_headings":"","what":"Returns TRUE if the given gtfs_obj contains the table in tidytransit's ","title":"Returns TRUE if the given gtfs_obj contains the table in tidytransit's ","text":"Returns TRUE given gtfs_obj contains table tidytransit's \"calculated tables sublist\" (gtfs_obj$.)","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/feed_contains..html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns TRUE if the given gtfs_obj contains the table in tidytransit's ","text":"","code":"feed_contains.(gtfs_obj, table_name)"},{"path":"https://r-transit.github.io/tidytransit/reference/feed_contains..html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns TRUE if the given gtfs_obj contains the table in tidytransit's ","text":"gtfs_obj gtfs feed (tidygtfs object) table_name name table look , string","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/filter_feed_by_area.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter a gtfs feed so that it only contains trips that pass a given area — filter_feed_by_area","title":"Filter a gtfs feed so that it only contains trips that pass a given area — filter_feed_by_area","text":"stop_times, stops, routes, services (calendar calendar_dates), shapes, frequencies transfers belonging one trips kept.","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/filter_feed_by_area.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter a gtfs feed so that it only contains trips that pass a given area — filter_feed_by_area","text":"","code":"filter_feed_by_area(gtfs_obj, area)"},{"path":"https://r-transit.github.io/tidytransit/reference/filter_feed_by_area.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter a gtfs feed so that it only contains trips that pass a given area — filter_feed_by_area","text":"gtfs_obj gtfs feed (tidygtfs object) area trips passing area kept. Either bounding box (numeric vector xmin, ymin, xmax, ymax) sf object.","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/filter_feed_by_area.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter a gtfs feed so that it only contains trips that pass a given area — filter_feed_by_area","text":"tidygtfs object filtered tables","code":""},{"path":[]},{"path":"https://r-transit.github.io/tidytransit/reference/filter_feed_by_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter a gtfs feed so that it only contains trips running on a given date — filter_feed_by_date","title":"Filter a gtfs feed so that it only contains trips running on a given date — filter_feed_by_date","text":"stop_times, stops, routes, services (calendar calendar_dates), shapes, frequencies transfers belonging one trips kept.","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/filter_feed_by_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter a gtfs feed so that it only contains trips running on a given date — filter_feed_by_date","text":"","code":"filter_feed_by_date(   gtfs_obj,   extract_date,   min_departure_time,   max_arrival_time )"},{"path":"https://r-transit.github.io/tidytransit/reference/filter_feed_by_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter a gtfs feed so that it only contains trips running on a given date — filter_feed_by_date","text":"gtfs_obj gtfs feed (tidygtfs object) extract_date date extract trips day (Date \"YYYY-MM-DD\" string) min_departure_time (optional) earliest departure time. Can given \"HH:MM:SS\", hms object numeric value seconds. max_arrival_time (optional) latest arrival time. Can given \"HH:MM:SS\", hms object numeric value seconds.","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/filter_feed_by_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter a gtfs feed so that it only contains trips running on a given date — filter_feed_by_date","text":"tidygtfs object filtered tables","code":""},{"path":[]},{"path":"https://r-transit.github.io/tidytransit/reference/filter_feed_by_stops.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter a gtfs feed so that it only contains trips that pass the given stops — filter_feed_by_stops","title":"Filter a gtfs feed so that it only contains trips that pass the given stops — filter_feed_by_stops","text":"stop_times, stops, routes, services (calendar calendar_dates), shapes, frequencies transfers belonging one trips kept.","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/filter_feed_by_stops.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter a gtfs feed so that it only contains trips that pass the given stops — filter_feed_by_stops","text":"","code":"filter_feed_by_stops(gtfs_obj, stop_ids = NULL, stop_names = NULL)"},{"path":"https://r-transit.github.io/tidytransit/reference/filter_feed_by_stops.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter a gtfs feed so that it only contains trips that pass the given stops — filter_feed_by_stops","text":"gtfs_obj gtfs feed (tidygtfs object) stop_ids vector stop_ids. can either provide stop_ids stop_names stop_names vector stop_names (converted stop_ids)","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/filter_feed_by_stops.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter a gtfs feed so that it only contains trips that pass the given stops — filter_feed_by_stops","text":"tidygtfs object filtered tables","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/filter_feed_by_stops.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Filter a gtfs feed so that it only contains trips that pass the given stops — filter_feed_by_stops","text":"returned gtfs_obj likely contains just stops given (.e. stops belong trip passing initial stop).","code":""},{"path":[]},{"path":"https://r-transit.github.io/tidytransit/reference/filter_feed_by_trips.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter a gtfs feed so that it only contains a given set of trips — filter_feed_by_trips","title":"Filter a gtfs feed so that it only contains a given set of trips — filter_feed_by_trips","text":"stop_times, stops, routes, services (calendar calendar_dates), shapes, frequencies transfers belonging one trips kept.","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/filter_feed_by_trips.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter a gtfs feed so that it only contains a given set of trips — filter_feed_by_trips","text":"","code":"filter_feed_by_trips(gtfs_obj, trip_ids)"},{"path":"https://r-transit.github.io/tidytransit/reference/filter_feed_by_trips.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter a gtfs feed so that it only contains a given set of trips — filter_feed_by_trips","text":"gtfs_obj gtfs feed (tidygtfs object) trip_ids vector trip_ids","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/filter_feed_by_trips.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter a gtfs feed so that it only contains a given set of trips — filter_feed_by_trips","text":"tidygtfs object filtered tables","code":""},{"path":[]},{"path":"https://r-transit.github.io/tidytransit/reference/filter_stop_times.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter a stop_times table for a given date and timespan. — filter_stop_times","title":"Filter a stop_times table for a given date and timespan. — filter_stop_times","text":"Filter stop_times table given date timespan.","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/filter_stop_times.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter a stop_times table for a given date and timespan. — filter_stop_times","text":"","code":"filter_stop_times(gtfs_obj, extract_date, min_departure_time, max_arrival_time)"},{"path":"https://r-transit.github.io/tidytransit/reference/filter_stop_times.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter a stop_times table for a given date and timespan. — filter_stop_times","text":"gtfs_obj gtfs feed (tidygtfs object) extract_date date extract trips day (Date \"YYYY-MM-DD\" string) min_departure_time (optional) earliest departure time. Can given \"HH:MM:SS\", hms object numeric value seconds. max_arrival_time (optional) latest arrival time. Can given \"HH:MM:SS\", hms object numeric value seconds.","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/filter_stop_times.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter a stop_times table for a given date and timespan. — filter_stop_times","text":"Filtered stop_times data.table travel_times() raptor().","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/filter_stop_times.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter a stop_times table for a given date and timespan. — filter_stop_times","text":"","code":"feed_path <- system.file(\"extdata\", \"routing.zip\", package = \"tidytransit\") g <- read_gtfs(feed_path)  # filter the sample feed stop_times <- filter_stop_times(g, \"2018-10-01\", \"06:00:00\", \"08:00:00\")"},{"path":"https://r-transit.github.io/tidytransit/reference/filter_stops.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a set of stops for a given set of service ids and route ids — filter_stops","title":"Get a set of stops for a given set of service ids and route ids — filter_stops","text":"Get set stops given set service ids route ids","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/filter_stops.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a set of stops for a given set of service ids and route ids — filter_stops","text":"","code":"filter_stops(gtfs_obj, service_ids, route_ids)"},{"path":"https://r-transit.github.io/tidytransit/reference/filter_stops.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a set of stops for a given set of service ids and route ids — filter_stops","text":"gtfs_obj gtfs feed (tidygtfs object) service_ids service get stops route_ids route_ids get stops","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/filter_stops.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a set of stops for a given set of service ids and route ids — filter_stops","text":"stops table given service route","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/filter_stops.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a set of stops for a given set of service ids and route ids — filter_stops","text":"","code":"# \\donttest{ library(dplyr) local_gtfs_path <- system.file(\"extdata\", \"nyc_subway.zip\", package = \"tidytransit\") nyc <- read_gtfs(local_gtfs_path) select_service_id <- filter(nyc$calendar, monday==1) %>% pull(service_id) select_route_id <- sample_n(nyc$routes, 1) %>% pull(route_id) filtered_stops_df <- filter_stops(nyc, select_service_id, select_route_id) # }"},{"path":"https://r-transit.github.io/tidytransit/reference/get_route_frequency.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Route Frequency — get_route_frequency","title":"Get Route Frequency — get_route_frequency","text":"Calculate number departures mean headways routes within given timespan given service_ids.","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/get_route_frequency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Route Frequency — get_route_frequency","text":"","code":"get_route_frequency(   gtfs_obj,   start_time = \"06:00:00\",   end_time = \"22:00:00\",   service_ids = NULL )"},{"path":"https://r-transit.github.io/tidytransit/reference/get_route_frequency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Route Frequency — get_route_frequency","text":"gtfs_obj gtfs feed (tidygtfs object) start_time analysis start time, can given \"HH:MM:SS\", hms object numeric value seconds. end_time analysis period end time, can given \"HH:MM:SS\", hms object numeric value seconds. service_ids set service_ids calendar dataframe identifying particular service id. provided, service_id departures used.","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/get_route_frequency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Route Frequency — get_route_frequency","text":"dataframe routes variables headway/frequency seconds route within given time frame","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/get_route_frequency.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Get Route Frequency — get_route_frequency","text":"GTFS feeds contain frequency data frame already. Consider using instead, accurate tidytransit calculates.","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/get_route_frequency.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Route Frequency — get_route_frequency","text":"","code":"data(gtfs_duke) routes_frequency <- get_route_frequency(gtfs_duke) x <- order(routes_frequency$median_headways) head(routes_frequency[x,]) #> # A tibble: 3 × 6 #>   route_id total_departures median_headways mean_headways st_dev_headways #>   <chr>               <int>           <dbl>         <dbl>           <dbl> #> 1 1679                  513            1440          2771           4940. #> 2 1690                 1242            1477          1403            223. #> 3 1683                  644            2590          4515           4390. #> # ℹ 1 more variable: stop_count <int>"},{"path":"https://r-transit.github.io/tidytransit/reference/get_route_geometry.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all trip shapes for a given route and service — get_route_geometry","title":"Get all trip shapes for a given route and service — get_route_geometry","text":"Get trip shapes given route service","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/get_route_geometry.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all trip shapes for a given route and service — get_route_geometry","text":"","code":"get_route_geometry(gtfs_sf_obj, route_ids = NULL, service_ids = NULL)"},{"path":"https://r-transit.github.io/tidytransit/reference/get_route_geometry.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all trip shapes for a given route and service — get_route_geometry","text":"gtfs_sf_obj tidytransit gtfs object sf data frames route_ids routes extract service_ids service_ids extract","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/get_route_geometry.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all trip shapes for a given route and service — get_route_geometry","text":"sf dataframe gtfs routes row/linestring trip","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/get_route_geometry.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get all trip shapes for a given route and service — get_route_geometry","text":"","code":"data(gtfs_duke) gtfs_duke_sf <- gtfs_as_sf(gtfs_duke) routes_sf <- get_route_geometry(gtfs_duke_sf) plot(routes_sf[c(1,1350),])"},{"path":"https://r-transit.github.io/tidytransit/reference/get_stop_frequency.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Stop Frequency — get_stop_frequency","title":"Get Stop Frequency — get_stop_frequency","text":"Calculate number departures mean headways stops within given timespan given service_ids.","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/get_stop_frequency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Stop Frequency — get_stop_frequency","text":"","code":"get_stop_frequency(   gtfs_obj,   start_time = \"06:00:00\",   end_time = \"22:00:00\",   service_ids = NULL,   by_route = TRUE )"},{"path":"https://r-transit.github.io/tidytransit/reference/get_stop_frequency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Stop Frequency — get_stop_frequency","text":"gtfs_obj gtfs feed (tidygtfs object) start_time analysis start time, can given \"HH:MM:SS\", hms object numeric value seconds. end_time analysis period end time, can given \"HH:MM:SS\", hms object numeric value seconds. service_ids set service_ids calendar dataframe identifying particular service id. provided, service_id departures used. by_route Default TRUE, FALSE calculate headway line coming stop direction schedule.","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/get_stop_frequency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Stop Frequency — get_stop_frequency","text":"dataframe stops number departures headway (departures divided timespan) seconds columns","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/get_stop_frequency.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Get Stop Frequency — get_stop_frequency","text":"GTFS feeds contain frequency data frame already. Consider using instead, accurate tidytransit calculates.","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/get_stop_frequency.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Stop Frequency — get_stop_frequency","text":"","code":"data(gtfs_duke) stop_frequency <- get_stop_frequency(gtfs_duke) x <- order(stop_frequency$mean_headway) head(stop_frequency[x,]) #> # A tibble: 6 × 6 #>   stop_id route_id direction_id service_id         n_departures mean_headway #>   <chr>   <chr>           <int> <chr>                     <int>        <dbl> #> 1 778127  1683                0 c_876_b_21969_d_31          143          403 #> 2 778084  1683                0 c_876_b_21969_d_31          128          450 #> 3 778095  1690                0 c_876_b_21969_d_31           78          738 #> 4 778134  1679                0 c_876_b_21969_d_31           76          758 #> 5 778058  1690                0 c_876_b_21969_d_31           75          768 #> 6 778102  1690                0 c_876_b_21969_d_31           75          768"},{"path":"https://r-transit.github.io/tidytransit/reference/get_trip_geometry.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all trip shapes for given trip ids — get_trip_geometry","title":"Get all trip shapes for given trip ids — get_trip_geometry","text":"Get trip shapes given trip ids","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/get_trip_geometry.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all trip shapes for given trip ids — get_trip_geometry","text":"","code":"get_trip_geometry(gtfs_sf_obj, trip_ids)"},{"path":"https://r-transit.github.io/tidytransit/reference/get_trip_geometry.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all trip shapes for given trip ids — get_trip_geometry","text":"gtfs_sf_obj tidytransit gtfs object sf data frames trip_ids trip_ids extract shapes","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/get_trip_geometry.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all trip shapes for given trip ids — get_trip_geometry","text":"sf dataframe gtfs routes row/linestring trip","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/get_trip_geometry.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get all trip shapes for given trip ids — get_trip_geometry","text":"","code":"data(gtfs_duke) gtfs_duke <- gtfs_as_sf(gtfs_duke) trips_sf <- get_trip_geometry(gtfs_duke, c(\"t_726295_b_19493_tn_41\", \"t_726295_b_19493_tn_40\")) plot(trips_sf[1,\"shape_id\"])"},{"path":"https://r-transit.github.io/tidytransit/reference/gtfs_as_sf.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert stops and shapes to Simple Features — gtfs_as_sf","title":"Convert stops and shapes to Simple Features — gtfs_as_sf","text":"Stops converted POINT sf data frames. Shapes converted LINESTRING data frame. Note function replaces stops shapes tables gtfs_obj.","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/gtfs_as_sf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert stops and shapes to Simple Features — gtfs_as_sf","text":"","code":"gtfs_as_sf(gtfs_obj, skip_shapes = FALSE, crs = NULL, quiet = TRUE)"},{"path":"https://r-transit.github.io/tidytransit/reference/gtfs_as_sf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert stops and shapes to Simple Features — gtfs_as_sf","text":"gtfs_obj gtfs feed (tidygtfs object, created read_gtfs()) skip_shapes TRUE, shapes converted. Default FALSE. crs optional coordinate reference system (used sf::st_transform()) transform lon/lat coordinates stops shapes quiet boolean whether print status messages","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/gtfs_as_sf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert stops and shapes to Simple Features — gtfs_as_sf","text":"tidygtfs object stops shapes sf dataframes","code":""},{"path":[]},{"path":"https://r-transit.github.io/tidytransit/reference/gtfs_duke.html","id":null,"dir":"Reference","previous_headings":"","what":"Example GTFS data — gtfs_duke","title":"Example GTFS data — gtfs_duke","text":"Data obtained https://data.trilliumtransit.com/gtfs/duke-nc-us/duke-nc-us.zip.","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/gtfs_duke.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example GTFS data — gtfs_duke","text":"","code":"gtfs_duke"},{"path":"https://r-transit.github.io/tidytransit/reference/gtfs_duke.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example GTFS data — gtfs_duke","text":"object class tidygtfs (inherits gtfs) length 18.","code":""},{"path":[]},{"path":"https://r-transit.github.io/tidytransit/reference/gtfs_to_tidygtfs.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an object created by gtfsio::import_gtfs to a tidygtfs object — gtfs_to_tidygtfs","title":"Convert an object created by gtfsio::import_gtfs to a tidygtfs object — gtfs_to_tidygtfs","text":"basic validation done ensure feed works tidytransit","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/gtfs_to_tidygtfs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an object created by gtfsio::import_gtfs to a tidygtfs object — gtfs_to_tidygtfs","text":"","code":"gtfs_to_tidygtfs(gtfs_list, files = NULL)"},{"path":"https://r-transit.github.io/tidytransit/reference/gtfs_to_tidygtfs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an object created by gtfsio::import_gtfs to a tidygtfs object — gtfs_to_tidygtfs","text":"gtfs_list list tables files subset files validate","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/gtfs_transform.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform coordinates of a gtfs feed — gtfs_transform","title":"Transform coordinates of a gtfs feed — gtfs_transform","text":"Transform coordinates gtfs feed","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/gtfs_transform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform coordinates of a gtfs feed — gtfs_transform","text":"","code":"gtfs_transform(gtfs_obj, crs)"},{"path":"https://r-transit.github.io/tidytransit/reference/gtfs_transform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform coordinates of a gtfs feed — gtfs_transform","text":"gtfs_obj gtfs feed (tidygtfs object) crs target coordinate reference system, used sf::st_transform()","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/gtfs_transform.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform coordinates of a gtfs feed — gtfs_transform","text":"tidygtfs object transformed stops shapes sf dataframes gtfs object transformed sf tables","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/hhmmss_to_hms.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert ","title":"Convert ","text":"Convert \"HH:MM:SS\" time strings hms values empty strings converted NA","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/hhmmss_to_hms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert ","text":"","code":"hhmmss_to_hms(time_strings)"},{"path":"https://r-transit.github.io/tidytransit/reference/hhmmss_to_hms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert ","text":"time_strings char vector (\"HH:MM:SS\")","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/hhmmss_to_sec_split.html","id":null,"dir":"Reference","previous_headings":"","what":"Fallback function to convert strings like 5:02:11 10x slower than hhmmss_to_seconds(), empty strings are converted to NA — hhmmss_to_sec_split","title":"Fallback function to convert strings like 5:02:11 10x slower than hhmmss_to_seconds(), empty strings are converted to NA — hhmmss_to_sec_split","text":"Fallback function convert strings like 5:02:11 10x slower hhmmss_to_seconds(), empty strings converted NA","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/hhmmss_to_sec_split.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fallback function to convert strings like 5:02:11 10x slower than hhmmss_to_seconds(), empty strings are converted to NA — hhmmss_to_sec_split","text":"","code":"hhmmss_to_sec_split(hhmmss_str)"},{"path":"https://r-transit.github.io/tidytransit/reference/hhmmss_to_sec_split.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fallback function to convert strings like 5:02:11 10x slower than hhmmss_to_seconds(), empty strings are converted to NA — hhmmss_to_sec_split","text":"hhmmss_str string","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/hhmmss_to_seconds.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert ","title":"Convert ","text":"Convert \"HH:MM:SS\" time strings seconds (numeric) empty strings converted NA","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/hhmmss_to_seconds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert ","text":"","code":"hhmmss_to_seconds(hhmmss_str)"},{"path":"https://r-transit.github.io/tidytransit/reference/hhmmss_to_seconds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert ","text":"hhmmss_str char vector (\"HH:MM:SS\")","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/interpolate_stop_times.html","id":null,"dir":"Reference","previous_headings":"","what":"Interpolate missing stop_times linearly — interpolate_stop_times","title":"Interpolate missing stop_times linearly — interpolate_stop_times","text":"Interpolate missing stop_times linearly","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/interpolate_stop_times.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interpolate missing stop_times linearly — interpolate_stop_times","text":"","code":"interpolate_stop_times(x, use_shape_dist = TRUE)"},{"path":"https://r-transit.github.io/tidytransit/reference/interpolate_stop_times.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interpolate missing stop_times linearly — interpolate_stop_times","text":"x tidygtfs object stop_times table use_shape_dist TRUE, use shape_dist_traveled column shapes table time interpolation (column available). FALSE shape_dist_traveled missing, times interpolated equally stops.","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/interpolate_stop_times.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interpolate missing stop_times linearly — interpolate_stop_times","text":"tidygtfs stop_times interpolated arrival departure times","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/interpolate_stop_times.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Interpolate missing stop_times linearly — interpolate_stop_times","text":"","code":"if (FALSE) { # \\dontrun{ data(gtfs_duke) print(gtfs_duke$stop_times[1:5, 1:5])  gtfs_duke_2 = interpolate_stop_times(gtfs_duke) print(gtfs_duke_2$stop_times[1:5, 1:5])  gtfs_duke_3 = interpolate_stop_times(gtfs_duke, FALSE) print(gtfs_duke_3$stop_times[1:5, 1:5]) } # }"},{"path":"https://r-transit.github.io/tidytransit/reference/json_to_sf.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a json (read with jsonlite) to sf object — json_to_sf","title":"Convert a json (read with jsonlite) to sf object — json_to_sf","text":"json object written temporary file re-read sf::read_sf().","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/json_to_sf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a json (read with jsonlite) to sf object — json_to_sf","text":"","code":"json_to_sf(json_list)"},{"path":"https://r-transit.github.io/tidytransit/reference/json_to_sf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a json (read with jsonlite) to sf object — json_to_sf","text":"json_list list read jsonlite::read_json() (gtfsio)","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/json_to_sf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a json (read with jsonlite) to sf object — json_to_sf","text":"sf object","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/na_to_empty_strings.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert NA values to empty strings (","title":"Convert NA values to empty strings (","text":"Convert NA values empty strings (\"\")","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/na_to_empty_strings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert NA values to empty strings (","text":"","code":"na_to_empty_strings(gtfs_obj)"},{"path":"https://r-transit.github.io/tidytransit/reference/na_to_empty_strings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert NA values to empty strings (","text":"gtfs_obj gtfs feed (tidygtfs object)","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/na_to_empty_strings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert NA values to empty strings (","text":"gtfs_obj NA strings tables replaced \"\"","code":""},{"path":[]},{"path":"https://r-transit.github.io/tidytransit/reference/plot.tidygtfs.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot GTFS stops and trips — plot.tidygtfs","title":"Plot GTFS stops and trips — plot.tidygtfs","text":"Plot GTFS stops trips","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/plot.tidygtfs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot GTFS stops and trips — plot.tidygtfs","text":"","code":"# S3 method for class 'tidygtfs' plot(x, ...)"},{"path":"https://r-transit.github.io/tidytransit/reference/plot.tidygtfs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot GTFS stops and trips — plot.tidygtfs","text":"x tidygtfs object read read_gtfs() ... ignored tidygtfs","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/plot.tidygtfs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot GTFS stops and trips — plot.tidygtfs","text":"plot","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/plot.tidygtfs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot GTFS stops and trips — plot.tidygtfs","text":"","code":"# \\donttest{ local_gtfs_path <- system.file(\"extdata\",                               \"nyc_subway.zip\",                               package = \"tidytransit\") nyc <- read_gtfs(local_gtfs_path) plot(nyc)  # }"},{"path":"https://r-transit.github.io/tidytransit/reference/print.tidygtfs.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a GTFS object — print.tidygtfs","title":"Print a GTFS object — print.tidygtfs","text":"Prints GTFS object suppressing class attribute hiding validation_result attribute, created validate_gtfs().","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/print.tidygtfs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a GTFS object — print.tidygtfs","text":"","code":"# S3 method for class 'tidygtfs' print(x, ...)"},{"path":"https://r-transit.github.io/tidytransit/reference/print.tidygtfs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a GTFS object — print.tidygtfs","text":"x tidygtfs object read read_gtfs() ... Optional arguments ultimately passed format.","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/print.tidygtfs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print a GTFS object — print.tidygtfs","text":"GTFS object printed, invisibly","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/print.tidygtfs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print a GTFS object — print.tidygtfs","text":"","code":"if (FALSE) { # \\dontrun{ path = system.file(\"extdata\",             \"nyc_subway.zip\",             package = \"tidytransit\")  g = read_gtfs(path) print(g) } # }"},{"path":"https://r-transit.github.io/tidytransit/reference/raptor.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate travel times from one stop to all reachable stops — raptor","title":"Calculate travel times from one stop to all reachable stops — raptor","text":"raptor finds minimal travel time, earliest latest arrival time stops stop_times journeys departing stop_ids within time_range.","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/raptor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate travel times from one stop to all reachable stops — raptor","text":"","code":"raptor(   stop_times,   transfers,   stop_ids,   arrival = FALSE,   time_range = 3600,   max_transfers = NULL,   keep = \"all\" )"},{"path":"https://r-transit.github.io/tidytransit/reference/raptor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate travel times from one stop to all reachable stops — raptor","text":"stop_times (prepared) stop_times table gtfs feed. Prepared means stop time rows desired journey departure time removed. table also include departures happening one day. Use filter_stop_times() easier preparation. transfers Transfers table gtfs feed. general preparation needed. Can omitted stop_times prepared filter_stop_times(). stop_ids Character vector stop_ids journeys start (end). recommended use stop_ids related , like different platforms train station bus stops reasonably close . arrival FALSE (default), journeys start stop_ids. TRUE, journeys end stop_ids. time_range Either range seconds vector containing minimal maximal departure time (.e. earliest latest possible journey departure time) seconds \"HH:MM:SS\" character. arrival TRUE, time_range describes time window journeys end stop_ids. max_transfers Maximum number transfers allowed, limit (NULL) default. keep One c(\"\", \"shortest\", \"earliest\", \"latest\"). default, journeys stop_ids returned. shortest journey shortest travel time returned. earliest journey arriving stop earliest returned, latest works accordingly.","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/raptor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate travel times from one stop to all reachable stops — raptor","text":"data.table journeys (departure, arrival travel time) /stop_ids reachable stop_ids.","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/raptor.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate travel times from one stop to all reachable stops — raptor","text":"modified Round-Based Public Transit Routing Algorithm (RAPTOR) using data.table, earliest arrival times stops calculated. two journeys arrive time, one later departure time thus shorter travel time kept. default, journeys departing within time_range arrive stop returned table. want journeys arriving stop_ids within specified time range, set arrival TRUE. Journeys defined \"\" \"\" stop_id, departure, arrival travel time. Note exact journeys (intermediate stop route ids example) returned. cases, stop_times needs filtered, contain trips happening single day, see filter_stop_times(). algorithm scans trips exceeds max_transfers trips stop_times visited.","code":""},{"path":[]},{"path":"https://r-transit.github.io/tidytransit/reference/raptor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate travel times from one stop to all reachable stops — raptor","text":"","code":"# \\donttest{ nyc_path <- system.file(\"extdata\", \"nyc_subway.zip\", package = \"tidytransit\") nyc <- read_gtfs(nyc_path)  # you can use initial walk times to different stops in walking distance (arbitrary example values) stop_ids_harlem_st <- c(\"301\", \"301N\", \"301S\") stop_ids_155_st <- c(\"A11\", \"A11N\", \"A11S\", \"D12\", \"D12N\", \"D12S\") walk_times <- data.frame(stop_id = c(stop_ids_harlem_st, stop_ids_155_st),                          walk_time = c(rep(600, 3), rep(410, 6)), stringsAsFactors = FALSE)  # Use journeys departing after 7 AM with arrival time before 11 AM on 26th of June stop_times <- filter_stop_times(nyc, \"2018-06-26\", 7*3600, 9*3600)  # calculate all journeys departing from Harlem St or 155 St between 7:00 and 7:30 rptr <- raptor(stop_times, nyc$transfers, walk_times$stop_id, time_range = 1800,                keep = \"all\")  # add walk times to travel times rptr <- merge(rptr, walk_times, by.x = \"from_stop_id\", by.y = \"stop_id\") rptr$travel_time_incl_walk <- rptr$travel_time + rptr$walk_time  # get minimal travel times (with walk times) for all stop_ids library(data.table) #>  #> Attaching package: ‘data.table’ #> The following objects are masked from ‘package:dplyr’: #>  #>     between, first, last shortest_travel_times <- setDT(rptr)[order(travel_time_incl_walk)][, .SD[1], by = \"to_stop_id\"] hist(shortest_travel_times$travel_time, breaks = seq(0,2*60)*60)  # }"},{"path":"https://r-transit.github.io/tidytransit/reference/read_gtfs.html","id":null,"dir":"Reference","previous_headings":"","what":"Read and validate GTFS files — read_gtfs","title":"Read and validate GTFS files — read_gtfs","text":"Reads GTFS feed either local .zip file URL validates GTFS specifications.","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/read_gtfs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read and validate GTFS files — read_gtfs","text":"","code":"read_gtfs(path, files = NULL, quiet = TRUE, ...)"},{"path":"https://r-transit.github.io/tidytransit/reference/read_gtfs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read and validate GTFS files — read_gtfs","text":"path path GTFS .zip file. files character vector containing text files validated GTFS specification without file extension (txt geojson). NULL (default), existing files read. quiet Whether hide log messages progress bars (defaults TRUE). ... Can used pass arguments gtfsio::import_gtfs(). parameters files quiet passed default.","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/read_gtfs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read and validate GTFS files — read_gtfs","text":"tidygtfs object: list tibbles entry represents GTFS text file. Additional tables stored . sublist.","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/read_gtfs.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Read and validate GTFS files — read_gtfs","text":"Limitations: read_gtfs() support downloading GTFS files URLs require authentication. need read feed behind authentication, first download feed local file pass local path read_gtfs().","code":""},{"path":[]},{"path":"https://r-transit.github.io/tidytransit/reference/read_gtfs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read and validate GTFS files — read_gtfs","text":"","code":"if (FALSE) { # \\dontrun{ local_gtfs_path <- system.file(\"extdata\", \"nyc_subway.zip\", package = \"tidytransit\") gtfs <- read_gtfs(local_gtfs_path) summary(gtfs)  gtfs <- read_gtfs(local_gtfs_path, files = c(\"trips\", \"stop_times\")) names(gtfs) } # }"},{"path":"https://r-transit.github.io/tidytransit/reference/route_type_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Dataframe of route type id's and the names of the types (e.g. ","title":"Dataframe of route type id's and the names of the types (e.g. ","text":"Extended GTFS Route Types: https://developers.google.com/transit/gtfs/reference/extended-route-types","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/route_type_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dataframe of route type id's and the names of the types (e.g. ","text":"","code":"route_type_names"},{"path":"https://r-transit.github.io/tidytransit/reference/route_type_names.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Dataframe of route type id's and the names of the types (e.g. ","text":"data frame 136 rows 2 variables: route_type id route type route_type_name name gtfs route type","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/route_type_names.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Dataframe of route type id's and the names of the types (e.g. ","text":"https://gist.github.com/derhuerst/b0243339e22c310bee2386388151e11e","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/set_dates_services.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns all possible date/service_id combinations as a data frame — set_dates_services","title":"Returns all possible date/service_id combinations as a data frame — set_dates_services","text":"Returns possible date/service_id combinations data frame","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/set_dates_services.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns all possible date/service_id combinations as a data frame — set_dates_services","text":"","code":"set_dates_services(gtfs_obj)"},{"path":"https://r-transit.github.io/tidytransit/reference/set_dates_services.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns all possible date/service_id combinations as a data frame — set_dates_services","text":"gtfs_obj gtfs feed (tidygtfs object)","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/set_dates_services.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns all possible date/service_id combinations as a data frame — set_dates_services","text":"date_service data frame","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/set_servicepattern.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate service pattern ids for a GTFS feed — set_servicepattern","title":"Calculate service pattern ids for a GTFS feed — set_servicepattern","text":"trip defined number dates runs . set dates called service pattern tidytransit. Trips servicepattern id run dates. general, service_id can work way enforced GTFS standard.","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/set_servicepattern.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate service pattern ids for a GTFS feed — set_servicepattern","text":"","code":"set_servicepattern(   gtfs_obj,   id_prefix = \"s_\",   hash_algo = \"md5\",   hash_length = 7 )"},{"path":"https://r-transit.github.io/tidytransit/reference/set_servicepattern.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate service pattern ids for a GTFS feed — set_servicepattern","text":"gtfs_obj gtfs feed (tidygtfs object) id_prefix servicepattern ids start string hash_algo hashing algorithm used digest::digest() hash_length length hash cut substr(). Use -1 full hash used","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/set_servicepattern.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate service pattern ids for a GTFS feed — set_servicepattern","text":"modified gtfs_obj added servicepattern list table linking trips pattern (trip_servicepatterns), added gtfs_obj$. sublist.","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/set_servicepattern.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate service pattern ids for a GTFS feed — set_servicepattern","text":"","code":"gtfs = set_servicepattern(gtfs_duke) gtfs$.$dates_servicepatterns #> # A tibble: 463 × 2 #>    date       servicepattern_id #>    <date>     <chr>             #>  1 2019-07-05 s_7e264b5         #>  2 2019-07-08 s_7e264b5         #>  3 2019-07-09 s_7e264b5         #>  4 2019-07-10 s_7e264b5         #>  5 2019-07-11 s_7e264b5         #>  6 2019-07-12 s_7e264b5         #>  7 2019-07-15 s_7e264b5         #>  8 2019-07-16 s_7e264b5         #>  9 2019-07-17 s_7e264b5         #> 10 2019-07-18 s_7e264b5         #> # ℹ 453 more rows"},{"path":"https://r-transit.github.io/tidytransit/reference/sf_as_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert stops and shapes from sf objects to tibbles — sf_as_tbl","title":"Convert stops and shapes from sf objects to tibbles — sf_as_tbl","text":"Coordinates transformed lon/lat columns (stop_lon/stop_lat shape_pt_lon/shape_pt_lat)","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/sf_as_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert stops and shapes from sf objects to tibbles — sf_as_tbl","text":"","code":"sf_as_tbl(gtfs_obj)"},{"path":"https://r-transit.github.io/tidytransit/reference/sf_as_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert stops and shapes from sf objects to tibbles — sf_as_tbl","text":"gtfs_obj gtfs feed (tidygtfs object)","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/sf_as_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert stops and shapes from sf objects to tibbles — sf_as_tbl","text":"tidygtfs object stops shapes converted tibbles","code":""},{"path":[]},{"path":"https://r-transit.github.io/tidytransit/reference/sf_lines_to_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds the coordinates of an sf LINESTRING object as columns and rows — sf_lines_to_df","title":"Adds the coordinates of an sf LINESTRING object as columns and rows — sf_lines_to_df","text":"Adds coordinates sf LINESTRING object columns rows","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/sf_lines_to_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds the coordinates of an sf LINESTRING object as columns and rows — sf_lines_to_df","text":"","code":"sf_lines_to_df(   lines_sf,   coord_colnames = c(\"shape_pt_lon\", \"shape_pt_lat\"),   remove_geometry = TRUE )"},{"path":"https://r-transit.github.io/tidytransit/reference/sf_lines_to_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds the coordinates of an sf LINESTRING object as columns and rows — sf_lines_to_df","text":"lines_sf sf object coord_colnames names new columns (existing columns overwritten) remove_geometry remove sf geometry column?","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/sf_points_to_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds the coordinates of an sf POINT object as columns — sf_points_to_df","title":"Adds the coordinates of an sf POINT object as columns — sf_points_to_df","text":"Adds coordinates sf POINT object columns","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/sf_points_to_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds the coordinates of an sf POINT object as columns — sf_points_to_df","text":"","code":"sf_points_to_df(   pts_sf,   coord_colnames = c(\"stop_lon\", \"stop_lat\"),   remove_geometry = TRUE )"},{"path":"https://r-transit.github.io/tidytransit/reference/sf_points_to_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds the coordinates of an sf POINT object as columns — sf_points_to_df","text":"pts_sf sf object coord_colnames names new columns (existing columns overwritten) remove_geometry remove sf geometry column?","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/sf_to_json.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an sf object to a json list — sf_to_json","title":"Convert an sf object to a json list — sf_to_json","text":"sf object written temporary file re-read jsonlite::read_json().","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/sf_to_json.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an sf object to a json list — sf_to_json","text":"","code":"sf_to_json(sf_obj, layer_name)"},{"path":"https://r-transit.github.io/tidytransit/reference/sf_to_json.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an sf object to a json list — sf_to_json","text":"sf_obj sf table","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/sf_to_json.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert an sf object to a json list — sf_to_json","text":"json list","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/shape_as_sf_linestring.html","id":null,"dir":"Reference","previous_headings":"","what":"return an sf linestring with lat and long from gtfs — shape_as_sf_linestring","title":"return an sf linestring with lat and long from gtfs — shape_as_sf_linestring","text":"return sf linestring lat long gtfs","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/shape_as_sf_linestring.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"return an sf linestring with lat and long from gtfs — shape_as_sf_linestring","text":"","code":"shape_as_sf_linestring(df)"},{"path":"https://r-transit.github.io/tidytransit/reference/shape_as_sf_linestring.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"return an sf linestring with lat and long from gtfs — shape_as_sf_linestring","text":"df dataframe gtfs shapes split() shape_id","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/shape_as_sf_linestring.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"return an sf linestring with lat and long from gtfs — shape_as_sf_linestring","text":"st_linestring (sfr) object","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/shapes_as_sf.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert shapes into Simple Features Linestrings — shapes_as_sf","title":"Convert shapes into Simple Features Linestrings — shapes_as_sf","text":"Convert shapes Simple Features Linestrings","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/shapes_as_sf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert shapes into Simple Features Linestrings — shapes_as_sf","text":"","code":"shapes_as_sf(gtfs_shapes, crs = NULL)"},{"path":"https://r-transit.github.io/tidytransit/reference/shapes_as_sf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert shapes into Simple Features Linestrings — shapes_as_sf","text":"gtfs_shapes gtfs$shapes dataframe crs optional coordinate reference system (used sf::st_transform()) transform lon/lat coordinates","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/shapes_as_sf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert shapes into Simple Features Linestrings — shapes_as_sf","text":"sf dataframe gtfs shapes","code":""},{"path":[]},{"path":"https://r-transit.github.io/tidytransit/reference/stop_distances.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate distances between a given set of stops — stop_distances","title":"Calculate distances between a given set of stops — stop_distances","text":"Calculate distances given set stops","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/stop_distances.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate distances between a given set of stops — stop_distances","text":"","code":"stop_distances(gtfs_stops)"},{"path":"https://r-transit.github.io/tidytransit/reference/stop_distances.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate distances between a given set of stops — stop_distances","text":"gtfs_stops gtfs stops table either data frame (least stop_id, stop_lon stop_lat columns) sf object.","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/stop_distances.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate distances between a given set of stops — stop_distances","text":"Returns data.frame row containing pair stop_ids (columns from_stop_id to_stop_id) distance (meters)","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/stop_distances.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Calculate distances between a given set of stops — stop_distances","text":"resulting data.frame nrow(gtfs_stops)^2 rows, distances calculations among stops large feeds avoided.","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/stop_distances.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate distances between a given set of stops — stop_distances","text":"","code":"if (FALSE) { # \\dontrun{ library(dplyr)  nyc_path <- system.file(\"extdata\", \"nyc_subway.zip\", package = \"tidytransit\") nyc <- read_gtfs(nyc_path)  nyc$stops %>%   filter(stop_name == \"Borough Hall\") %>%   stop_distances() %>%   arrange(desc(distance))  #> # A tibble: 36 × 3 #>    from_stop_id to_stop_id  distance #>    <chr>        <chr>          <dbl> #>  1 423          232             91.5 #>  2 423N         232             91.5 #>  3 423S         232             91.5 #>  4 423          232N            91.5 #>  5 423N         232N            91.5 #>  6 423S         232N            91.5 #>  7 423          232S            91.5 #>  8 423N         232S            91.5 #>  9 423S         232S            91.5 #> 10 232          423             91.5 #> # … with 26 more rows } # }"},{"path":"https://r-transit.github.io/tidytransit/reference/stop_group_distances.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates distances among stop within the same group column — stop_group_distances","title":"Calculates distances among stop within the same group column — stop_group_distances","text":"default calculates distances among stop_ids stop_name.","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/stop_group_distances.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates distances among stop within the same group column — stop_group_distances","text":"","code":"stop_group_distances(gtfs_stops, by = \"stop_name\", max_only = FALSE)"},{"path":"https://r-transit.github.io/tidytransit/reference/stop_group_distances.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates distances among stop within the same group column — stop_group_distances","text":"gtfs_stops gtfs stops table either data frame (least stop_id, stop_lon stop_lat columns) sf object. group column, default: \"stop_name\" max_only return max distance among stops? (default FALSE). TRUE allows slightly faster calculation.","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/stop_group_distances.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates distances among stop within the same group column — stop_group_distances","text":"data.frame one row per group containing distance matrix (distances), number stop ids within group (n_stop_ids) distance summary values (dist_mean, dist_median dist_max).","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/stop_group_distances.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates distances among stop within the same group column — stop_group_distances","text":"","code":"if (FALSE) { # \\dontrun{ library(dplyr)  nyc_path <- system.file(\"extdata\", \"nyc_subway.zip\", package = \"tidytransit\") nyc <- read_gtfs(nyc_path)  stop_group_distances(nyc$stops) #> # A tibble: 380 × 6 #>    stop_name   distances       n_stop_ids dist_mean dist_median dist_max #>    <chr>       <list>               <dbl>     <dbl>       <dbl>    <dbl> #>  1 86 St       <dbl [18 × 18]>         18     5395.       5395.   21811. #>  2 79 St       <dbl [6 × 6]>            6    19053.      19053.   19053. #>  3 Prospect Av <dbl [6 × 6]>            6    18804.      18804.   18804. #>  4 77 St       <dbl [6 × 6]>            6    16947.      16947.   16947. #>  5 59 St       <dbl [6 × 6]>            6    14130.      14130.   14130. #>  6 50 St       <dbl [9 × 9]>            9     7097.       7097.   14068. #>  7 36 St       <dbl [6 × 6]>            6    12496.      12496.   12496. #>  8 8 Av        <dbl [6 × 6]>            6    11682.      11682.   11682. #>  9 7 Av        <dbl [9 × 9]>            9     5479.       5479.   10753. #> 10 111 St      <dbl [9 × 9]>            9     3877.       3877.    7753. #> # … with 370 more rows } # }"},{"path":"https://r-transit.github.io/tidytransit/reference/stops_as_sf.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert stops into Simple Features Points — stops_as_sf","title":"Convert stops into Simple Features Points — stops_as_sf","text":"Convert stops Simple Features Points","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/stops_as_sf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert stops into Simple Features Points — stops_as_sf","text":"","code":"stops_as_sf(stops, crs = NULL)"},{"path":"https://r-transit.github.io/tidytransit/reference/stops_as_sf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert stops into Simple Features Points — stops_as_sf","text":"stops gtfs$stops dataframe crs optional coordinate reference system (used sf::st_transform()) transform lon/lat coordinates","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/stops_as_sf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert stops into Simple Features Points — stops_as_sf","text":"sf dataframe gtfs routes point column","code":""},{"path":[]},{"path":"https://r-transit.github.io/tidytransit/reference/stops_as_sf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert stops into Simple Features Points — stops_as_sf","text":"","code":"data(gtfs_duke) some_stops <- gtfs_duke$stops[sample(nrow(gtfs_duke$stops), 40),] some_stops_sf <- stops_as_sf(some_stops) plot(some_stops_sf[,\"stop_name\"])"},{"path":"https://r-transit.github.io/tidytransit/reference/summary.tidygtfs.html","id":null,"dir":"Reference","previous_headings":"","what":"GTFS feed summary — summary.tidygtfs","title":"GTFS feed summary — summary.tidygtfs","text":"GTFS feed summary","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/summary.tidygtfs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GTFS feed summary — summary.tidygtfs","text":"","code":"# S3 method for class 'tidygtfs' summary(object, ...)"},{"path":"https://r-transit.github.io/tidytransit/reference/summary.tidygtfs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GTFS feed summary — summary.tidygtfs","text":"object tidygtfs object read read_gtfs() ... ignored tidygtfs","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/summary.tidygtfs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GTFS feed summary — summary.tidygtfs","text":"tidygtfs object, invisibly","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/tidygtfs_to_gtfs.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a tidygtfs object to a gtfs object (for gtfsio) — tidygtfs_to_gtfs","title":"Convert a tidygtfs object to a gtfs object (for gtfsio) — tidygtfs_to_gtfs","text":"Convert tidygtfs object gtfs object (gtfsio)","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/tidygtfs_to_gtfs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a tidygtfs object to a gtfs object (for gtfsio) — tidygtfs_to_gtfs","text":"","code":"tidygtfs_to_gtfs(gtfs_obj)"},{"path":"https://r-transit.github.io/tidytransit/reference/tidygtfs_to_gtfs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a tidygtfs object to a gtfs object (for gtfsio) — tidygtfs_to_gtfs","text":"gtfs_obj gtfs feed (tidygtfs object)","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/tidygtfs_to_gtfs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a tidygtfs object to a gtfs object (for gtfsio) — tidygtfs_to_gtfs","text":"gtfs list","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/travel_times.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate shortest travel times from a stop to all reachable stops — travel_times","title":"Calculate shortest travel times from a stop to all reachable stops — travel_times","text":"Function calculate shortest travel times stop (given stop_name) stop_names feed. filtered_stop_times needs created filter_stop_times() filter_feed_by_date().","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/travel_times.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate shortest travel times from a stop to all reachable stops — travel_times","text":"","code":"travel_times(   filtered_stop_times,   stop_name,   time_range = 3600,   arrival = FALSE,   max_transfers = NULL,   max_departure_time = NULL,   return_coords = FALSE,   return_DT = FALSE,   stop_dist_check = 300 )"},{"path":"https://r-transit.github.io/tidytransit/reference/travel_times.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate shortest travel times from a stop to all reachable stops — travel_times","text":"filtered_stop_times stop_times data.table (transfers stops tables attributes) created filter_stop_times() departure arrival time set. stop_name Stop name travel times calculated. vector multiple names can used. time_range Either range seconds vector containing minimal maximal departure time (.e. earliest latest possible journey departure time) seconds \"HH:MM:SS\" character. arrival TRUE, time_range describes time window journeys end stop_name. arrival FALSE (default), journeys start stop_name. TRUE, journeys end stop_name. max_transfers maximum number transfers. limit NULL max_departure_time Deprecated. Use time_range set latest possible departure time. return_coords Returns stop coordinates (lon/lat) columns. Default FALSE. return_DT travel_times() returns data.table TRUE. Default FALSE returns tibble/tbl_df. stop_dist_check stop_names structured identifiers like stop_ids parent_stations, possible stops name far apart. travel_times() errors distance among stop_ids name threshold (meters). Use FALSE turn check . However, recommended either use raptor() fix feed (see cluster_stops()) case warnings.","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/travel_times.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate shortest travel times from a stop to all reachable stops — travel_times","text":"table travel times /stops reachable stop_name corresponding journey departure arrival times.","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/travel_times.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate shortest travel times from a stop to all reachable stops — travel_times","text":"function allows easier access raptor() using stop names instead ids returning shortest travel times default. Note however stop_name might suitable identifier feed. possible multiple stops name related geographically close . stop_group_distances() cluster_stops() can help identify fix issues stop_names.","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/travel_times.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate shortest travel times from a stop to all reachable stops — travel_times","text":"","code":"# \\donttest{ library(dplyr)  # 1) Calculate travel times from two closely related stops # The example dataset gtfs_duke has missing times (allowed in gtfs) which is # why we run interpolate_stop_times beforehand gtfs = interpolate_stop_times(gtfs_duke)  tts1 = gtfs %>%   filter_feed_by_date(\"2019-08-26\") %>%   travel_times(c(\"Campus Dr at Arts Annex (WB)\", \"Campus Dr at Arts Annex (EB)\"),                time_range = c(\"14:00:00\", \"15:30:00\"))  # you can use either filter_feed_by_date or filter_stop_times to prepare the feed # the result is the same tts2 = gtfs %>%  filter_stop_times(\"2019-08-26\", \"14:00:00\") %>%  travel_times(c(\"Campus Dr at Arts Annex (WB)\", \"Campus Dr at Arts Annex (EB)\"),               time_range = 1.5*3600) # 1.5h after 14:00  all(tts1 == tts2) #> [1] TRUE # It's recommended to store the filtered feed, since it can be time consuming to # run it for every travel time calculation, see the next example steps  # 2) separate filtering and travel time calculation for a more granular analysis # stop_names in this feed are not restricted to an area, create clusters of stops to fix nyc_path <- system.file(\"extdata\", \"nyc_subway.zip\", package = \"tidytransit\") nyc <- read_gtfs(nyc_path) nyc <- cluster_stops(nyc, group_col = \"stop_name\", cluster_colname = \"stop_name\")  # Use journeys departing after 7 AM with arrival time before 9 AM on 26th June stop_times <- filter_stop_times(nyc, \"2018-06-26\", 7*3600, 9*3600)  # Calculate travel times from \"34 St - Herald Sq\" tts <- travel_times(stop_times, \"34 St - Herald Sq\", return_coords = TRUE)  # only keep journeys under one hour for plotting tts <- tts %>% filter(travel_time <= 3600)  # travel time to Queensboro Plaza is 810 seconds, 13:30 minutes tts %>%   filter(to_stop_name == \"Queensboro Plaza\") %>%   mutate(travel_time = hms::hms(travel_time)) #> # A tibble: 1 × 12 #>   from_stop_name    to_stop_name     travel_time journey_departure_time #>   <chr>             <chr>            <time>      <time>                 #> 1 34 St - Herald Sq Queensboro Plaza 13'30\"      07:42:30               #> # ℹ 8 more variables: journey_arrival_time <time>, transfers <int>, #> #   from_stop_id <chr>, to_stop_id <chr>, from_stop_lon <dbl>, #> #   from_stop_lat <dbl>, to_stop_lon <dbl>, to_stop_lat <dbl>  # plot a simple map showing travel times to all reachable stops # this can be expanded to isochron maps library(ggplot2) ggplot(tts) + geom_point(aes(x=to_stop_lon, y=to_stop_lat, color = travel_time))  # }"},{"path":"https://r-transit.github.io/tidytransit/reference/validate_gtfs.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate GTFS feed — validate_gtfs","title":"Validate GTFS feed — validate_gtfs","text":"Validates GTFS object GTFS specifications raises warnings required files/fields found. function called read_gtfs().","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/validate_gtfs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate GTFS feed — validate_gtfs","text":"","code":"validate_gtfs(gtfs_obj, files = NULL, warnings = TRUE)"},{"path":"https://r-transit.github.io/tidytransit/reference/validate_gtfs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate GTFS feed — validate_gtfs","text":"gtfs_obj gtfs object (.e. list tables, necessary tidygtfs object) files character vector containing text files validated GTFS specification without file extension (txt geojson). NULL (default), provided GTFS feed validated possible GTFS text files. warnings Whether display warning messages (defaults TRUE).","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/validate_gtfs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate GTFS feed — validate_gtfs","text":"validation_result tibble containing validation summary possible fields specified files.","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/validate_gtfs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Validate GTFS feed — validate_gtfs","text":"Note function just checks required files fields missing. validation internal consistency (e.g. departure times arrival times calendar covering reasonable period).","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/validate_gtfs.html","id":"details-1","dir":"Reference","previous_headings":"","what":"Details","title":"Validate GTFS feed — validate_gtfs","text":"GTFS object's files fields validated GTFS specifications documented  GTFS Schedule Reference: GTFS feeds considered valid include required files fields. required file/field missing function (optionally) raises warning. Optional files/fields listed reference required, thus warning raised missing. Extra files/fields listed reference (either refer specific GTFS extension due reason). Note files (calendar.txt, calendar_dates.txt feed_info.txt) conditionally required. means : calendar.txt initially set required file. present, however, becomes optional calendar_dates.txt (originally set optional) becomes required. feed_info.txt initially set optional file. translations.txt present, however, becomes required.","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/validate_gtfs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate GTFS feed — validate_gtfs","text":"","code":"validate_gtfs(gtfs_duke) #> # A tibble: 254 × 8 #>    file   file_spec file_provided_status field  field_spec field_provided_status #>    <chr>  <chr>     <lgl>                <chr>  <chr>      <lgl>                 #>  1 agency Required  TRUE                 agenc… Condition… TRUE                  #>  2 agency Required  TRUE                 agenc… Required   TRUE                  #>  3 agency Required  TRUE                 agenc… Required   TRUE                  #>  4 agency Required  TRUE                 agenc… Required   TRUE                  #>  5 agency Required  TRUE                 agenc… Optional   TRUE                  #>  6 agency Required  TRUE                 agenc… Optional   TRUE                  #>  7 agency Required  TRUE                 agenc… Optional   TRUE                  #>  8 agency Required  TRUE                 agenc… Optional   FALSE                 #>  9 areas  Optional  FALSE                area_… Required   FALSE                 #> 10 areas  Optional  FALSE                area_… Optional   FALSE                 #> # ℹ 244 more rows #> # ℹ 2 more variables: validation_status <chr>, validation_details <chr>  if (FALSE) { # \\dontrun{ local_gtfs_path <- system.file(\"extdata\", \"nyc_subway.zip\", package = \"tidytransit\") gtfs <- read_gtfs(local_gtfs_path) attr(gtfs, \"validation_result\")  gtfs$shapes <- NULL validation_result <- validate_gtfs(gtfs)  # should raise a warning gtfs$stop_times <- NULL validation_result <- validate_gtfs(gtfs) } # }"},{"path":"https://r-transit.github.io/tidytransit/reference/write_gtfs.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a tidygtfs object to a zip file — write_gtfs","title":"Write a tidygtfs object to a zip file — write_gtfs","text":"Write tidygtfs object zip file","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/write_gtfs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a tidygtfs object to a zip file — write_gtfs","text":"","code":"write_gtfs(gtfs_obj, zipfile, compression_level = 9, as_dir = FALSE)"},{"path":"https://r-transit.github.io/tidytransit/reference/write_gtfs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a tidygtfs object to a zip file — write_gtfs","text":"gtfs_obj gtfs feed (tidygtfs object) zipfile path zip file feed written . file overwritten already exists. compression_level number 1 9, defaults 9 (best compression). as_dir TRUE, feed zipped zipfile used directory path. directory overwritten already exists.","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/write_gtfs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write a tidygtfs object to a zip file — write_gtfs","text":"Invisibly returns gtfs_obj","code":""},{"path":"https://r-transit.github.io/tidytransit/reference/write_gtfs.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Write a tidygtfs object to a zip file — write_gtfs","text":"Auxiliary tidytransit tables (e.g. dates_services) exported. Calls gtfsio::export_gtfs() preparing data.","code":""},{"path":[]},{"path":"https://r-transit.github.io/tidytransit/reference/write_gtfs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write a tidygtfs object to a zip file — write_gtfs","text":"","code":"if (FALSE) { # \\dontrun{ local_gtfs_path <- system.file(\"extdata\", \"nyc_subway.zip\", package = \"tidytransit\") gtfs <- read_gtfs(local_gtfs_path)  gtfs <- filter_feed_by_date(gtfs, \"2018-06-30\")  write_gtfs(gtfs, \"feed_filtered.zip\") } # }"},{"path":"https://r-transit.github.io/tidytransit/news/index.html","id":"tidytransit-170","dir":"Changelog","previous_headings":"","what":"tidytransit 1.7.0","title":"tidytransit 1.7.0","text":"CRAN release: 2024-10-18 read_gtfs() can now read locations.geojson files according updated specifications #214 tidytransit 1.7.0 needs gtfsio 1.2.0 uses json reading capabilities gtfsio::import_gtfs() Internally, automatically parsed specifications https://gtfs.org/documentation/schedule/reference/ now used example feed google_transit_nyc_subway.zip modified renamed nyc_subway.zip #218","code":""},{"path":"https://r-transit.github.io/tidytransit/news/index.html","id":"tidytransit-161","dir":"Changelog","previous_headings":"","what":"tidytransit 1.6.1","title":"tidytransit 1.6.1","text":"CRAN release: 2023-12-07 fix: Add fare_media_id fare_products spec.R #207 compare values, ignore attributes sf object tests #211 Fix tests CRAN update contributors #212","code":""},{"path":"https://r-transit.github.io/tidytransit/news/index.html","id":"tidytransit-160","dir":"Changelog","previous_headings":"","what":"tidytransit 1.6.0","title":"tidytransit 1.6.0","text":"CRAN release: 2023-06-23 update raptor() travel_times(), add interpolate_stop_times() #204 depend dplyr >= 1.1.1 #205","code":""},{"path":"https://r-transit.github.io/tidytransit/news/index.html","id":"tidytransit-151","dir":"Changelog","previous_headings":"","what":"tidytransit 1.5.1","title":"tidytransit 1.5.1","text":"CRAN release: 2023-05-01 Improve duplicated primary key check #203","code":""},{"path":"https://r-transit.github.io/tidytransit/news/index.html","id":"tidytransit-150","dir":"Changelog","previous_headings":"","what":"tidytransit 1.5.0","title":"tidytransit 1.5.0","text":"CRAN release: 2023-03-10 introduce as_tidygtfs primary key check #198 tidygtfsinherits list class #202 Use NA empty arrival/departure time strings #196 pass ... argument read_gtfsto gtfsio::import_gtfs #199 Fix dplyr 1.1.1 #197 depend gtfsio >= 1.1.0 #201 update raptor doc #200","code":""},{"path":"https://r-transit.github.io/tidytransit/news/index.html","id":"tidytransit-141","dir":"Changelog","previous_headings":"","what":"tidytransit 1.4.1","title":"tidytransit 1.4.1","text":"CRAN release: 2023-02-01 optional transfers filter_stop_times #188 Suppress multiple match warning (dplyr 1.1) #191 Use expect_no_warning, remove httr dependency #194","code":""},{"path":"https://r-transit.github.io/tidytransit/news/index.html","id":"tidytransit-140","dir":"Changelog","previous_headings":"","what":"tidytransit 1.4.0","title":"tidytransit 1.4.0","text":"remove transitfeeds API dataset, add mobilitydata.org vignette #184 update URLs #185 increase test coverage update doc #186","code":""},{"path":"https://r-transit.github.io/tidytransit/news/index.html","id":"tidytransit-131","dir":"Changelog","previous_headings":"","what":"tidytransit 1.3.1","title":"tidytransit 1.3.1","text":"CRAN release: 2022-05-20 optimize filter_stop_times #183","code":""},{"path":"https://r-transit.github.io/tidytransit/news/index.html","id":"tidytransit-130","dir":"Changelog","previous_headings":"","what":"tidytransit 1.3.0","title":"tidytransit 1.3.0","text":"CRAN release: 2022-01-31 fix set_dates_services feeds using calendar_dates #178 keep transfers stops match filter #180 stop distance analysis stop_name clustering #181 functions convert empty strings NA vice versa #182","code":""},{"path":"https://r-transit.github.io/tidytransit/news/index.html","id":"tidytransit-120","dir":"Changelog","previous_headings":"","what":"tidytransit 1.2.0","title":"tidytransit 1.2.0","text":"CRAN release: 2021-11-23 Trim dependencies #171 restore get_route_frequency vignette #173 fix github actions #174 fix ggplot warnings vignette use “tidygtfs” summary files parameter now passed gtfsio::import_gtfs","code":""},{"path":"https://r-transit.github.io/tidytransit/news/index.html","id":"tidytransit-110","dir":"Changelog","previous_headings":"","what":"tidytransit 1.1.0","title":"tidytransit 1.1.0","text":"CRAN release: 2021-07-26 added filter_feed_by functions #168 write_gtfs now correctly converts sf objects gtfs csv tables (via sf_as_tbl) #168 added gtfs_transform runs sf::st_transform shapes stops #168 added trolleybus monorail route_types update documentation deployment","code":""},{"path":"https://r-transit.github.io/tidytransit/news/index.html","id":"tidytransit-100","dir":"Changelog","previous_headings":"","what":"tidytransit 1.0.0","title":"tidytransit 1.0.0","text":"CRAN release: 2021-05-09 use gtfsio backend #164","code":""}]
